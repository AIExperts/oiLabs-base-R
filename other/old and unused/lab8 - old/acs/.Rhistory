homes$garage[homes$garage == "" | is.na(homes$garage)] <- 0
homes <- read.delim("~/Dropbox/OI APB/OI Labs/lab8/data/LAhomes.txt")
homes <- homes[,-8]
homes$garage[homes$garage == ""] <- 0
levels(homes$garage)
homes <- read.delim("~/Dropbox/OI APB/OI Labs/lab8/data/LAhomes.txt")
homes <- homes[,-8]
levels(homes$garage)
homes$garage
homes[1500:1600,]
homes <- read.delim("~/Dropbox/OI APB/OI Labs/lab8/data/LAhomes.txt")
homes <- homes[,-8]
homes$garage[homes$garage == ""] <- 0
homes$garage[homes$garage == ""] <- 0
homes <- read.delim("~/Dropbox/OI APB/OI Labs/lab8/data/LAhomes.txt")
homes <- homes[,-8]
levels(homes$garage)[1] <- "0"
levels(homes$garage)
summary(homes$garage)
summary(homes$type)
levesl(homes$type)[1] <- "NA"
levels(homes$type)[1] <- "NA"
summary(homes$type)
levels(homes$type)[1] <- NULL
levels(homes$type)[1] <- NA
summary(homes$type)
plot(homes)
hist(homes$price)
?url
h <- url("http://www.stat.ucla.edu/~abray")
h
h$test
h$text
sample(letters, 6)
set.seed(100)
sample(letters, 6)
sample(letters, 6)
set.seed(100)
set.seed(100)
sample(letters, 6)
sample(letters, 100)
sample(letters, 100, replace = T)
sample(letters, 100, replace = T)
cat(sample(letters, 100, replace = T))
?cat
cat(sample(letters, 100, replace = T), sep = "")
cat(sample(letters, 100, replace = T), sep = "")
cat(sample(letters, 100, replace = T), sep = "")
cat(sample(letters, 100, replace = T), sep = "")
cat(sample(letters, 100, replace = T), sep = "")
set.seed(552012)
cat(sample(letters, 50, replace = T), sep = "")
a <-sample(letters, 50, replace = T)
set.seed(552012)
set.seed(552012)
a <-sample(letters, 50, replace = T)
a
which(a=="d")
which(a=="a")
which(a=="t")
which(a=="f")
which(a=="e")
which(a=="s")
which(a=="u")
which(a=="c")
a <-sample(letters, 100, replace = T)
which(a=="d")
which(a=="a")
set.seed(552012)
a <-sample(letters, 100, replace = T)
which(a=="d")
which(a=="a")
which(a=="t")
which(a=="u")
which(a=="c")
which(a=="l")
which(a=="e")
which(a=="g")
which(a=="r")
which(a=="o")
which(a=="u")
which(a=="p")
which(a=="s")
which(a=="d")
which(a=="a")
which(a=="t")
which(a=="f")
which(a=="e")
which(a=="s")
which(a=="t")
d <- a[c(40, 18, 42, 99, 16, 45, 35, 52, 50, 84, 18, 42, 7, 92, 23, 18, 45, 62, 17, 2, 13, 47, 7, 70, 35, 62, 99, 52, 18, 22, 45, 72, 42)]
cat(d, sep = "")
cat(a, ".", b, ".", d, ".", e, "/", f, "/", sep = "")
?bank
set.seed(552012)
bank <- sample(letters, 100, replace = T)
a <- c(40, 18, 42, 99, 16, 45, 35, 52)
b <- c(50, 84, 18, 42)
d <- c(7, 92, 23, 18)
e <- c(45, 62, 17)
f <- c(2, 13, 47, 7, 70, 35)
g <- c(62, 99, 52, 18, 22, 45, 72, 42)
cat(a, ".", b, ".", d, ".", e, "/", f, "/", sep = "")
cat(A[a], ".", A[b], ".", A[d], ".", A[e], "/", A[f], "/", sep = "")
set.seed(552012)
A <- sample(letters, 100, replace = T)
a <- c(40, 18, 42, 99, 16, 45, 35, 52)
b <- c(50, 84, 18, 42)
d <- c(7, 92, 23, 18)
e <- c(45, 62, 17)
f <- c(2, 13, 47, 7, 70, 35)
g <- c(62, 99, 52, 18, 22, 45, 72, 42)
cat(A[a], ".", A[b], ".", A[d], ".", A[e], "/", A[f], "/", sep = "")
d <- read.csv("eval.csv")
setwd("C:/Users/Andrew/Dropbox/OI APB/OI Labs/(8) lab8 - in progress/acs")
d <- read.csv("eval.csv")
names(eval)
names(d)
table(d$pic_color)
aggregate(prof_eval~rank, d, "mean")
aggregate(prof_eval~gender, d, "mean")
aggregate(prof_eval~ethnicity, d, "mean")
n <- c(5:200)
SE <- sqrt(.5*.5/n)
plot(SE~n, type = "n")
lines(n, SE, col = "blue")
d <- read.csv("eval.csv")
head(eval)
head(d)
names(d)
table(d[,17])
aggregate(prof_eval~bty_avg, d, "mean")
a <- aggregate(prof_eval~bty_avg, d, "mean")
names(a)
plot(a$prof_eval~a$bty_avg)
library(knitr)
install.packages("knitr")
install.packages("knitr")
library(knitr)
setwd("C:/Users/Andrew/Dropbox/OI APB/OI Labs/(5) lab5/lab")
setwd("C:/Users/Andrew/Dropbox/OI APB/OI Labs/(8) lab8 - in progress/acs")
unique(d$prof_id)
names(d)
pairs(d[,1:10])
table(d$class13)
table(d$class14)
table(d$class15)
table(d$class16)
table(d$class17)
table(d$class18)
table(d$class19)
table(d$class20)
names(d)
pairs(d[13:24])
load("C:/Users/Andrew/Downloads/eval.Rdata")
names(eval)
getwd()
?write.csv
write.csv(eval, "eval.csv", row.names=FALSE)
d <- read.csv("eval.csv")
aggregate(eval~rank, d, "mean")
names(d)
table(d$eval)
hist(d$eval)
names(d)
hist(d$eval)
names(d)
?table
table(d$ethnicity, d$language)
plot(d$age, d$bty_avg)
m1 <- lm(eval~d$bty_avg)
m1 <- lm(d$eval~d$bty_avg)
plot(m1)
summary(m1)
plot(d$eval~ d$bty_avg)
plot(d$eval~ jitter(d$bty_avg))
hist(d$bty_avg)
names(d)
plot(d$eval~d$cls_students)
plot(d$eval~log(d$cls_students))
m2 <- lm(d$eval~d$gender)
plot(m2)
d <- read.csv("eval.csv")
m1 <- lm(d$eval~d$bty_avg)
plot(eval$eval~eval$bty_avg)
plot(d$eval~d$bty_avg)
plot(d$eval~jitter(d$bty_avg))
?jitter
plot(jitter(d$eval)~d$bty_avg)
names(d)
m1 <- lm(eval~., data = d)
summary(m1)
m1 <- lm(d$eval~d$bty_avg)
d <- read.csv("eval.csv")
hist(d$eval)
plot(d$eval~jitter(d$bty_avg))
m1 <- lm(d$eval~d$bty_avg)
summary(m1\)
summary(m1'')
summary(m1)
plot(m1)
m2 <- lm(d$eval~d$bty_avg + d$gender)
summary(m2)
plot(m2)
plot(d$eval~jitter(d$bty_avg))
abline(m1)
abline(m1, col = "blue")
abline(m2, col = "blue")
abline(m2, col = "blue")
class(m1)
is.lm(m1)
class(m1)=="lm"
class(m1)!="lm"
?warning
names(m2)
?model
m2$terms
names(m2)
m2$model
m2$coef
summary(m2)
names(m1)
m2$df.res
m2$rank
m2$effects
names(m1)
m2$assign
m2$xlevels
m2$coef
levels(d$gender)
m2$call
m2 <- lm(eval~bty_avg + gender, data = d)
m2$call
names(m2$xlevels)
m1$xlevels
m3 <- lm(eval~bty_avg + gender + rank, data = d)
summary(m3)
m3$xlevels
names(m3)
m3$terms
names(m3)
length(model$xlevels)
length(m2$xlevels)
length(m3$xlevels)
length(m2$coef)
m3$xlevels
m3$xlevels$rank
dim(m3$xlevels)
length(m3$xlevels)
m3$call
class(m3$call)
attributes(m3$call)
names(m3$call)
m3$call$formula
names(m3$call$formula)
class(m3$call$formula)
m3$call$data
names(m3)
m3$rank
m2$rank
m3$xlevels
m3$xlevels[1]
length(m3$xlevels[1])
length(m3$xlevels[1,1])
class(m3$xlevels[1])
m3$xlevels[[1]
]
length(m2$coef)
length(model$xlevels[[1]]-1
length(model$xlevels[[1]])
length(m2$xlevels[[1]])
names(d)
m4 <- lm(eval~bty_avg + gender + cls_students, data = d)
summary(m4)
model <- lm(eval~bty_avg + gender + cls_students, data = d)
if(length(model$coef)-length(model$xlevels[[1]])!=1)){
warning{"Model must contain exactly one non-categorical predictor"}
}
if(length(model$coef)-length(model$xlevels[[1]])!=1)){
warning("Model must contain exactly one non-categorical predictor")
}
if(length(model$coef)-length(model$xlevels[[1]])!=1){
warning("Model must contain exactly one non-categorical predictor")
}
if(length(model$xlevels!=1)){
warning("Model must contain exactly one categorical predictor")
}
if(length(model$xlevels!)=1){
warning("Model must contain exactly one categorical predictor")
}
if(length(model$xlevels)!=1){
warning("Model must contain exactly one categorical predictor")
}
if(class(model)!="lm"){
warning("Model must be the output of the function lm()")
}
d <- read.csv("eval.csv")
m1 <- lm(d$eval~d$bty_avg)
summary(m1)
plot(m1)
model <- lm(eval~bty_avg + gender + cls_students, data = d)
head(d$gender)
m3 <- lm(eval~bty_avg + rank, data = d)
summary(m3)
names(d$rank)
levels(d$rank)
names(m3)
abline(m3)
plot(d$eval~jitter(d$bty_avg))
abline(m1)
abline(m1, col = "blue")
names(m3)
m3$coef
?intercept
model$coef[1]
m3$contrasts
m2$xlevels
m2 <- lm(eval~bty_avg + gender, data = d)
m2$xlevels
m2$coef
m2$contrasts
names(m2$contrasts)
?cat
?paste
length(m2$xlevels)
length(m2$xlevels[[1]])
?indicator
m2$xlevels
m2$xlevels[[1]]
m2$xlevels[[1]][2]
indicatorName <- paste(names(m2$contrasts),m2$xlevels[[1]][1+i])
i = 1
indicatorName <- paste(names(m2$contrasts),m2$xlevels[[1]][1+i])
indicatorName
indicatorName <- paste(names(m2$contrasts),m2$xlevels[[1]][1+i], sep = "")
indicatorName
m2$coef$indicatorName
m2$coef
names(m2)
m2$assign
names(summary(m2))
summary(m2)$call
summary(m2)$terms
summary(m2)$coef
names(m2)
?sub
?substitute
paste("m2$coef$",eval(indicatorName))
paste("m2$coef$",eval(indicatorName), sep = "")
eval(paste("m2$coef$",eval(indicatorName), sep = ""))
length(ex1 <- expression(1+ 0:9))# 1
ex1
eval(ex1)# 1:10
expression(paste("m2$coef$",eval(indicatorName), sep = ""))
eval(expression(paste("m2$coef$",eval(indicatorName), sep = "")))
paste("m2$coef$",eval(indicatorName), sep = "")
?eval
?substitute
substitute(paste("m2$coef$",eval(indicatorName), sep = ""))
substitute(expression(paste("m2$coef$",eval(indicatorName), sep = "")))
quote(expression(paste("m2$coef$",eval(indicatorName), sep = "")))
?deparse
deparse(paste("m2$coef$",eval(indicatorName), sep = ""))
deparse(expression(paste("m2$coef$",eval(indicatorName), sep = "")))
parse(paste("m2$coef$",eval(indicatorName), sep = ""))
eval(substitute(paste("m2$coef$",eval(indicatorName), sep = "")))
m2$coef$gendermale
m2$coef
names(m2$coef)
names(m2$coef)==indicatorName
ms$coef[names(m2$coef)==indicatorName]
m2$coef[names(m2$coef)==indicatorName]
?abline
?colors
rainbow(5)
rainbow(1)
m1 <- lm(d$eval~d$bty_avg)
plot(d$eval~jitter(d$bty_avg))
m2$coef
length(m2$xlevels[[1]])
m2$xlevels
indicatorInd <- c(1, rep(0, nLines))# used to find slope parameter by process of elimination
nLines <- length(m2$xlevels[[1]])
intercepts <- c(baseIntercept, rep(0, nLines-1))
baseIntercept <- m2$coef[1]
nLines <- length(m2$xlevels[[1]])
intercepts <- c(baseIntercept, rep(0, nLines-1))
indicatorInd <- c(1, rep(0, nLines))# used to find slope parameter by process of elimination
indicatorInd
nLines
i = 1
indicatorName <- paste(names(m2$contrasts),m2$xlevels[[1]][1+i], sep = "")
indicatorName
indicatorInd <- indicatorInd + m2$coef[names(m2$coef)==indicatorName
]
indicatorInd
indicatorInd <- indicatorInd + (names(m2$coef)==indicatorName)
indicatorInd <- c(1, rep(0, nLines))# used to find slope parameter by process of elimination
indicatorInd <- indicatorInd + (names(m2$coef)==indicatorName)
indicatorIind
indicatorInd
slope <- m2$coef[!indicatorInd]
slope
plot(d$eval~jitter(d$bty_avg))
baseIntercept <- m2$coef[1]
nLines <- length(m2$xlevels[[1]])
intercepts <- c(baseIntercept, rep(0, nLines-1))
indicatorInd <- c(1, rep(0, nLines))# used to find slope parameter by process of elimination
for(i in 1:(nLines-1){
indicatorName <- paste(names(m2$contrasts),m2$xlevels[[1]][1+i], sep = "")
intercepts[i+1] <- baseIntercept + m2$coef[names(m2$coef)==indicatorName]
indicatorInd <- indicatorInd + (names(m2$coef)==indicatorName)
}
slope <- m2$coef[!indicatorInd]
for(i in 1:(nLines-1)){
indicatorName <- paste(names(m2$contrasts),m2$xlevels[[1]][1+i], sep = "")
intercepts[i+1] <- baseIntercept + m2$coef[names(m2$coef)==indicatorName]
indicatorInd <- indicatorInd + (names(m2$coef)==indicatorName)
}
slope <- m2$coef[!indicatorInd]
baseIntercept <- m2$coef[1]
nLines <- length(m2$xlevels[[1]])
intercepts <- c(baseIntercept, rep(0, nLines-1))
indicatorInd <- c(1, rep(0, nLines))# used to find slope parameter by process of elimination
for(i in 1:(nLines-1)){
indicatorName <- paste(names(m2$contrasts),m2$xlevels[[1]][1+i], sep = "")
intercepts[i+1] <- baseIntercept + m2$coef[names(m2$coef)==indicatorName]
indicatorInd <- indicatorInd + (names(m2$coef)==indicatorName)
}
slope <- m2$coef[!indicatorInd]
for(j in 1:nLines){
abline(incercepts[i], slope, col = rainbow(nlines)[i])
}
for(j in 1:nLines){
abline(intercepts[i], slope, col = rainbow(nlines)[i])
}
for(j in 1:nLines){
abline(intercepts[i], slope, col = rainbow(nLines)[i])
}
intercepts
rainbow(2)
abline(3.5, 1, col = "#FF0000FF")
abline(3.5, 1, col = "#00FFFFFF")
nLines
for(j in 1:nLines){
abline(intercepts[j], slope, col = rainbow(nLines)[j])
}
twoLines <- function(model, ...){
if(class(model)!="lm"){
warning("Model must be the output of the function lm()")
}
if(length(model$xlevels)!=1){
warning("Model must contain exactly one categorical predictor")
}
if(length(model$coef)-length(model$xlevels[[1]])!=1){
warning("Model must contain exactly one non-categorical predictor")
}
baseIntercept <- model$coef[1]
nLines <- length(model$xlevels[[1]])
intercepts <- c(baseIntercept, rep(0, nLines-1))
indicatorInd <- c(1, rep(0, nLines))# used to find slope parameter by process of elimination
for(i in 1:(nLines-1)){
indicatorName <- paste(names(model$contrasts),model$xlevels[[1]][1+i], sep = "")
intercepts[i+1] <- baseIntercept + model$coef[names(model$coef)==indicatorName]
indicatorInd <- indicatorInd + (names(model$coef)==indicatorName)
}
slope <- model$coef[!indicatorInd]
for(j in 1:nLines){
abline(intercepts[j], slope, col = rainbow(nLines)[j])
}
}
twoLines <- function(model, ...){
if(class(model)!="lm"){
warning("Model must be the output of the function lm()")
}
if(length(model$xlevels)!=1){
warning("Model must contain exactly one categorical predictor")
}
if(length(model$coef)-length(model$xlevels[[1]])!=1){
warning("Model must contain exactly one non-categorical predictor")
}
baseIntercept <- model$coef[1]
nLines <- length(model$xlevels[[1]])
intercepts <- c(baseIntercept, rep(0, nLines-1))
indicatorInd <- c(1, rep(0, nLines))# used to find slope parameter by process of elimination
for(i in 1:(nLines-1)){
indicatorName <- paste(names(model$contrasts),model$xlevels[[1]][1+i], sep = "")
intercepts[i+1] <- baseIntercept + model$coef[names(model$coef)==indicatorName]
indicatorInd <- indicatorInd + (names(model$coef)==indicatorName)
}
slope <- model$coef[!indicatorInd]
for(j in 1:nLines){
abline(intercepts[j], slope, col = rainbow(nLines)[j], ...)
}
}
plot(d$eval~jitter(d$bty_avg))
twoLines(m2)
m3 <- lm(eval~bty_avg + rank, data = d)
twoLines(m3)
names(d)
summary(m1)
names(d)
table(d$cls_credits)
table(d$pic_outfit)
names(d)
d <- read.csv("eval.csv")
names(d)
names(d)[1] <- "score"
names(d)
write.csv(d, "evals.csv", row.names = F)
evals <- read.csv("evals.csv")
names(evals)
