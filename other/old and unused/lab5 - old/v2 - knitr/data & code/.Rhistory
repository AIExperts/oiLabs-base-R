datatable = xtable(metadatatable[,4:16], caption="Data", label = "tab:datatable")
print(datatable, tabular.environment='longtable', NA.string = "-", size = "small")
datatable = xtable(metadatatable[,3:16], caption="Data", label = "tab:datatable")
library(xtable, verbose = F)#
library(meta, verbose = F)#
#
metadata = read.csv("/Users/mine/Documents/SCC/(1) Meta-analysis/metadata.csv", header = T)#
#
metadatatable = metadata#
names(metadatatable)[5:16] = c("NoDrain","Drain","HemND","HemD","HealND","HealD","AbscND",           "AbscD","SerND", "SerD","InfND" ,"InfD")#
#
datatable = xtable(metadatatable[,3:16], caption="Data", label = "tab:datatable")#
#
print(datatable, tabular.environment='longtable', NA.string = "-", size = "small")#
# Hematoma#
#
hema = metabin(Hematoma_D, Drain, Hematoma_ND, NoDrain, studlab = AuthorYear, subset = !is.na(metadata$Hematoma_ND)  & !is.na(metadata$Hematoma_D), data = metadata, sm = "OR", allstudies = FALSE)#
#
summary(hema)#
#
metabias(hema)#
#
funnel(hema, comb.fixed = TRUE, yaxis = "size", cex.lab = 0.8)#
#
forest(hema, allstudies = F, comb.fixed = TRUE, comb.random = TRUE, lab.e = "Drain", lab.c = "No-Drain", fontsize = 8, leftlabs = c("Study", "Hematoma", "Total", "Hematoma", "Total"))#
# Healing#
#
heal = metabin(Healing_D, Drain, Healing_ND, NoDrain, studlab = AuthorYear, subset = !is.na(metadata$Healing_ND)  & !is.na(metadata$Healing_D),data = metadata, sm = "OR", allstudies = FALSE)#
#
summary(heal)#
#
metabias(heal)#
#
funnel(heal, comb.fixed = TRUE, yaxis = "size", cex.lab = 0.8)#
#
forest(heal, allstudies = F, comb.fixed = TRUE, comb.random = TRUE, lab.e = "Drain", lab.c = "No-Drain", fontsize = 8, leftlabs = c("Study", "Healing", "Total", "Healing", "Total"))#
# Abscess#
#
abscess = metabin(Abscess_D, Drain, Abscess_ND, NoDrain, studlab = AuthorYear, subset = !is.na(metadata$Abscess_ND)  & !is.na(metadata$Abscess_D),data = metadata, sm = "OR", allstudies = FALSE)#
#
summary(abscess)#
#
metabias(abscess)#
#
funnel(abscess, comb.fixed = TRUE, yaxis = "size", cex.lab = 0.8)#
#
forest(abscess, allstudies = F, comb.fixed = TRUE, comb.random = TRUE, lab.e = "Drain", lab.c = "No-Drain", fontsize = 8, leftlabs = c("Study", "Abscess", "Total", "Abscess", "Total"))#
# Seroma#
#
seroma = metabin(Seroma_D, Drain, Seroma_ND, NoDrain, studlab = AuthorYear, subset = !is.na(metadata$Seroma_ND)  & !is.na(metadata$Seroma_D),data = metadata, sm = "OR", allstudies = FALSE)#
#
summary(seroma)#
#
metabias(seroma)#
#
funnel(seroma, comb.fixed = TRUE, yaxis = "size", cex.lab = 0.8)#
#
forest(seroma, allstudies = F, comb.fixed = TRUE, comb.random = TRUE, lab.e = "Drain", lab.c = "No-Drain", fontsize = 8, leftlabs = c("Study", "Seroma", "Total", "Seroma", "Total"))#
# Infection#
#
infection = metabin(Infection_D, Drain, Infection_ND, NoDrain, studlab = AuthorYear, subset = !is.na(metadata$Infection_ND)  & !is.na(metadata$Infection_D),data = metadata, sm = "OR", allstudies = FALSE)#
#
summary(infection)#
#
metabias(infection)#
#
funnel(infection, comb.fixed = TRUE, yaxis = "size", cex.lab = 0.8)#
#
forest(infection, allstudies = F, comb.fixed = TRUE, comb.random = TRUE, lab.e = "Drain", lab.c = "No-Drain", fontsize = 8, leftlabs = c("Study", "Infection", "Total", "Infection", "Total"))#
##########################################################################
# Cumulative excluding breast biopsies#
##########################################################################
#
metadata_nbb = metadata[metadata$Procedure != "Breast biopsy",]#
#
# Hematoma#
#
hema_nbb = metabin(Hematoma_D, Drain, Hematoma_ND, NoDrain, studlab = AuthorYear, subset = !is.na(metadata_nbb$Hematoma_ND)  & !is.na(metadata_nbb$Hematoma_D), data = metadata_nbb, sm = "OR", allstudies = FALSE)#
#
summary(hema_nbb)#
#
metabias(hema_nbb)#
#
funnel(hema, comb.fixed = TRUE, yaxis = "size", cex.lab = 0.8)#
#
forest(hema_nbb, allstudies = F, comb.fixed = TRUE, comb.random = TRUE, lab.e = "Drain", lab.c = "No-Drain", fontsize = 8, leftlabs = c("Study", "Hematoma", "Total", "Hematoma", "Total"))#
# Healing#
#
heal_nbb = metabin(Healing_D, Drain, Healing_ND, NoDrain, studlab = AuthorYear, subset = !is.na(metadata_nbb$Healing_ND)  & !is.na(metadata_nbb$Healing_D),data = metadata_nbb, sm = "OR", allstudies = FALSE)#
#
summary(heal_nbb)#
#
metabias(heal_nbb)#
#
funnel(heal_nbb, comb.fixed = TRUE, yaxis = "size", cex.lab = 0.8)#
#
forest(heal_nbb, allstudies = F, comb.fixed = TRUE, comb.random = TRUE, lab.e = "Drain", lab.c = "No-Drain", fontsize = 8, leftlabs = c("Study", "Healing", "Total", "Healing", "Total"))#
# Abscess#
#
abscess_nbb = metabin(Abscess_D, Drain, Abscess_ND, NoDrain, studlab = AuthorYear, subset = !is.na(metadata_nbb$Abscess_ND)  & !is.na(metadata_nbb$Abscess_D),data = metadata_nbb, sm = "OR", allstudies = FALSE)#
#
summary(abscess_nbb)#
#
metabias(abscess_nbb)#
#
funnel(abscess_nbb, comb.fixed = TRUE, yaxis = "size", cex.lab = 0.8)#
#
forest(abscess_nbb, allstudies = F, comb.fixed = TRUE, comb.random = TRUE, lab.e = "Drain", lab.c = "No-Drain", fontsize = 8, leftlabs = c("Study", "Abscess", "Total", "Abscess", "Total"))#
# Seroma#
#
seroma_nbb = metabin(Seroma_D, Drain, Seroma_ND, NoDrain, studlab = AuthorYear, subset = !is.na(metadata_nbb$Seroma_ND)  & !is.na(metadata_nbb$Seroma_D),data = metadata_nbb, sm = "OR", allstudies = FALSE)#
#
summary(seroma_nbb)#
#
metabias(seroma_nbb)#
#
funnel(seroma_nbb, comb.fixed = TRUE, yaxis = "size", cex.lab = 0.8)#
#
forest(seroma_nbb, allstudies = F, comb.fixed = TRUE, comb.random = TRUE, lab.e = "Drain", lab.c = "No-Drain", fontsize = 8, leftlabs = c("Study", "Seroma", "Total", "Seroma", "Total"))#
# Infection#
#
infection_nbb = metabin(Infection_D, Drain, Infection_ND, NoDrain, studlab = AuthorYear, subset = !is.na(metadata_nbb$Infection_ND)  & !is.na(metadata_nbb$Infection_D),data = metadata_nbb, sm = "OR", allstudies = FALSE)#
#
summary(infection_nbb)#
#
metabias(infection_nbb)#
#
funnel(infection_nbb, comb.fixed = TRUE, yaxis = "size", cex.lab = 0.8)#
#
forest(infection_nbb, allstudies = F, comb.fixed = TRUE, comb.random = TRUE, lab.e = "Drain", lab.c = "No-Drain", fontsize = 8, leftlabs = c("Study", "Infection", "Total", "Infection", "Total"))#
##########################################################################
# Separate meta-analyses for each type of procedure (for those with at least 3 studies per procedure)#
##########################################################################
## Cesarian section#
#
metadata_cs = metadata[metadata$Procedure == "Cesarian section",]#
#
# Hematoma#
#
hema_cs = metabin(Hematoma_D, Drain, Hematoma_ND, NoDrain, studlab = AuthorYear, subset = !is.na(metadata_cs$Hematoma_ND)  & !is.na(metadata_cs$Hematoma_D), data = metadata_cs, sm = "OR", allstudies = FALSE)#
#
summary(hema_cs)#
#
metabias(hema_cs)#
#
funnel(hema_cs, comb.fixed = TRUE, yaxis = "size", cex.lab = 0.8)#
#
forest(hema_cs, allstudies = F, comb.fixed = TRUE, comb.random = TRUE, lab.e = "Drain", lab.c = "No-Drain", fontsize = 8, leftlabs = c("Study", "Hematoma", "Total", "Hematoma", "Total"))#
#
# Healing#
#
heal_cs = metabin(Healing_D, Drain, Healing_ND, NoDrain, studlab = AuthorYear, subset = !is.na(metadata_cs$Healing_ND)  & !is.na(metadata_cs$Healing_D),data = metadata_cs, sm = "OR", allstudies = FALSE)#
#
summary(heal_cs)#
#
metabias(heal_cs)#
#
funnel(heal_cs, comb.fixed = TRUE, yaxis = "size", cex.lab = 0.8)#
#
forest(heal_cs, allstudies = F, comb.fixed = TRUE, comb.random = TRUE, lab.e = "Drain", lab.c = "No-Drain", fontsize = 8, leftlabs = c("Study", "Healing", "Total", "Healing", "Total"))#
#
# Abscess - only two studies with this outcome#
#
# Seroma#
#
seroma_cs = metabin(Seroma_D, Drain, Seroma_ND, NoDrain, studlab = AuthorYear, subset = !is.na(metadata_cs$Seroma_ND)  & !is.na(metadata_cs$Seroma_D),data = metadata_cs, sm = "OR", allstudies = FALSE)#
#
summary(seroma_cs)#
#
metabias(seroma_cs)#
#
funnel(seroma_cs, comb.fixed = TRUE, yaxis = "size", cex.lab = 0.8)#
#
forest(seroma_cs, allstudies = F, comb.fixed = TRUE, comb.random = TRUE, lab.e = "Drain", lab.c = "No-Drain", fontsize = 8, leftlabs = c("Study", "Seroma", "Total", "Seroma", "Total"))#
#
# Infection#
#
infection_cs = metabin(Infection_D, Drain, Infection_ND, NoDrain, studlab = AuthorYear, subset = !is.na(metadata_cs$Infection_ND)  & !is.na(metadata_cs$Infection_D),data = metadata_cs, sm = "OR", allstudies = FALSE)#
#
summary(infection_cs)#
#
metabias(infection_cs)#
#
funnel(infection_cs, comb.fixed = TRUE, yaxis = "size", cex.lab = 0.8)#
#
forest(infection_cs, allstudies = F, comb.fixed = TRUE, comb.random = TRUE, lab.e = "Drain", lab.c = "No-Drain", fontsize = 8, leftlabs = c("Study", "Infection", "Total", "Infection", "Total"))#
#
##########################################################################
#
## Abdominal wound#
#
metadata_aw = metadata[metadata$Procedure == "Abdominal wound",]#
#
# Hematoma#
#
hema_aw = metabin(Hematoma_D, Drain, Hematoma_ND, NoDrain, studlab = AuthorYear, subset = !is.na(metadata_aw$Hematoma_ND)  & !is.na(metadata_aw$Hematoma_D), data = metadata_aw, sm = "OR", allstudies = FALSE)#
#
summary(hema_aw)#
#
metabias(hema_aw)#
#
funnel(hema_aw, comb.fixed = TRUE, yaxis = "size", cex.lab = 0.8)#
#
forest(hema_aw, allstudies = F, comb.fixed = TRUE, comb.random = TRUE, lab.e = "Drain", lab.c = "No-Drain", fontsize = 8, leftlabs = c("Study", "Hematoma", "Total", "Hematoma", "Total"))#
#
# Healing#
#
heal_aw = metabin(Healing_D, Drain, Healing_ND, NoDrain, studlab = AuthorYear, subset = !is.na(metadata_aw$Healing_ND)  & !is.na(metadata_aw $Healing_D),data = metadata_aw, sm = "OR", allstudies = FALSE)#
#
summary(heal_aw)#
#
metabias(heal_aw)#
#
funnel(heal_aw, comb.fixed = TRUE, yaxis = "size", cex.lab = 0.8)#
#
forest(heal_aw, allstudies = F, comb.fixed = TRUE, comb.random = TRUE, lab.e = "Drain", lab.c = "No-Drain", fontsize = 8, leftlabs = c("Study", "Healing", "Total", "Healing", "Total"))#
#
# Abscess - less than 3 studies with this outcome#
#
# Seroma#
#
seroma_aw = metabin(Seroma_D, Drain, Seroma_ND, NoDrain, studlab = AuthorYear, subset = !is.na(metadata_aw$Seroma_ND)  & !is.na(metadata_aw$Seroma_D),data = metadata_aw, sm = "OR", allstudies = FALSE)#
#
summary(seroma_aw)#
#
metabias(seroma_aw)#
#
funnel(seroma_aw, comb.fixed = TRUE, yaxis = "size", cex.lab = 0.8)#
#
forest(seroma_aw, allstudies = F, comb.fixed = TRUE, comb.random = TRUE, lab.e = "Drain", lab.c = "No-Drain", fontsize = 8, leftlabs = c("Study", "Seroma", "Total", "Seroma", "Total"))#
#
# Infection#
#
infection_aw = metabin(Infection_D, Drain, Infection_ND, NoDrain, studlab = AuthorYear, subset = !is.na(metadata_aw$Infection_ND)  & !is.na(metadata_aw$Infection_D),data = metadata_aw, sm = "OR", allstudies = FALSE)#
#
summary(infection_aw)#
#
metabias(infection_aw)#
#
funnel(infection_aw, comb.fixed = TRUE, yaxis = "size", cex.lab = 0.8)#
#
forest(infection_aw, allstudies = F, comb.fixed = TRUE, comb.random = TRUE, lab.e = "Drain", lab.c = "No-Drain", fontsize = 8, leftlabs = c("Study", "Infection", "Total", "Infection", "Total"))#
#
##########################################################################
#
## Breast reduction#
#
metadata_br = metadata[metadata$Procedure == "Breast reduction",]#
#
# Hematoma#
#
hema_br = metabin(Hematoma_D, Drain, Hematoma_ND, NoDrain, studlab = AuthorYear, subset = !is.na(metadata_br$Hematoma_ND)  & !is.na(metadata_br$Hematoma_D), data = metadata_br, sm = "OR", allstudies = FALSE)#
#
summary(hema_br)#
#
metabias(hema_br)#
#
funnel(hema_br, comb.fixed = TRUE, yaxis = "size", cex.lab = 0.8)#
#
forest(hema_br, allstudies = F, comb.fixed = TRUE, comb.random = TRUE, lab.e = "Drain", lab.c = "No-Drain", fontsize = 8, leftlabs = c("Study", "Hematoma", "Total", "Hematoma", "Total"))#
#
# Healing#
#
heal_br = metabin(Healing_D, Drain, Healing_ND, NoDrain, studlab = AuthorYear, subset = !is.na(metadata_br$Healing_ND)  & !is.na(metadata_br $Healing_D),data = metadata_br, sm = "OR", allstudies = FALSE)#
#
summary(heal_br)#
#
metabias(heal_br)#
#
funnel(heal_br, comb.fixed = TRUE, yaxis = "size", cex.lab = 0.8)#
#
forest(heal_br, allstudies = F, comb.fixed = TRUE, comb.random = TRUE, lab.e = "Drain", lab.c = "No-Drain", fontsize = 8, leftlabs = c("Study", "Healing", "Total", "Healing", "Total"))#
#
# Abscess, Seroma, Infection - less than 3 studies with this outcome#
#
##########################################################################
#
## Breast biopsy#
#
metadata_bb = metadata[metadata$Procedure == "Breast biopsy",]#
#
# Hematoma#
#
hema_bb = metabin(Hematoma_D, Drain, Hematoma_ND, NoDrain, studlab = AuthorYear, subset = !is.na(metadata_bb$Hematoma_ND)  & !is.na(metadata_bb$Hematoma_D), data = metadata_bb, sm = "OR", allstudies = FALSE)#
#
summary(hema_bb)#
#
metabias(hema_bb)#
#
funnel(hema_bb, comb.fixed = TRUE, yaxis = "size", cex.lab = 0.8)#
#
forest(hema_bb, allstudies = F, comb.fixed = TRUE, comb.random = TRUE, lab.e = "Drain", lab.c = "No-Drain", fontsize = 8, leftlabs = c("Study", "Hematoma", "Total", "Hematoma", "Total"))#
#
# Infection#
#
infection_bb = metabin(Infection_D, Drain, Infection_ND, NoDrain, studlab = AuthorYear, subset = !is.na(metadata_bb$Infection_ND)  & !is.na(metadata_bb$Infection_D),data = metadata_bb, sm = "OR", allstudies = FALSE)#
#
summary(infection_bb)#
#
metabias(infection_bb)#
#
funnel(infection_bb, comb.fixed = TRUE, yaxis = "size", cex.lab = 0.8)#
#
forest(infection_bb, allstudies = F, comb.fixed = TRUE, comb.random = TRUE, lab.e = "Drain", lab.c = "No-Drain", fontsize = 8, leftlabs = c("Study", "Healing", "Total", "Healing", "Total"))#
#
# Healing , Abscess, Seroma - less than 3 studies with this outcome#
##########################################################################
#
## Femoral Wounds#
#
metadata_fw = metadata[metadata$Procedure == "Femoral Wounds",]#
#
# Hematoma#
#
hema_fw = metabin(Hematoma_D, Drain, Hematoma_ND, NoDrain, studlab = AuthorYear, subset = !is.na(metadata_fw$Hematoma_ND)  & !is.na(metadata_fw$Hematoma_D), data = metadata_fw, sm = "OR", allstudies = FALSE)#
#
summary(hema_fw)#
#
metabias(hema_fw)#
#
funnel(hema_fw, comb.fixed = TRUE, yaxis = "size", cex.lab = 0.8)#
#
forest(hema_fw, allstudies = F, comb.fixed = TRUE, comb.random = TRUE, lab.e = "Drain", lab.c = "No-Drain", fontsize = 8, leftlabs = c("Study", "Hematoma", "Total", "Hematoma", "Total"))#
#
# Infection#
#
infection_fw = metabin(Infection_D, Drain, Infection_ND, NoDrain, studlab = AuthorYear, subset = !is.na(metadata_fw$Infection_ND)  & !is.na(metadata_fw$Infection_D),data = metadata_fw, sm = "OR", allstudies = FALSE)#
#
summary(infection_fw)#
#
metabias(infection_fw)#
#
funnel(infection_fw, comb.fixed = TRUE, yaxis = "size", cex.lab = 0.8)#
#
forest(infection_fw, allstudies = F, comb.fixed = TRUE, comb.random = TRUE, lab.e = "Drain", lab.c = "No-Drain", fontsize = 8, leftlabs = c("Study", "Healing", "Total", "Healing", "Total"))#
#
# Healing , Abscess, Seroma - less than 3 studies with this outcome#
##########################################################################
#
## Axillary LN#
#
metadata_aln = metadata[metadata$Procedure == "Axillary LN",]#
# Abscess - only two studies with this outcome#
#
# Seroma#
#
seroma_aln = metabin(Seroma_D, Drain, Seroma_ND, NoDrain, studlab = AuthorYear, subset = !is.na(metadata_aln$Seroma_ND)  & !is.na(metadata_aln$Seroma_D),data = metadata_aln, sm = "OR", allstudies = FALSE)#
#
summary(seroma_aln)#
#
metabias(seroma_aln)#
#
funnel(seroma_aln, comb.fixed = TRUE, yaxis = "size", cex.lab = 0.8)#
#
forest(seroma_aln, allstudies = F, comb.fixed = TRUE, comb.random = TRUE, lab.e = "Drain", lab.c = "No-Drain", fontsize = 8, leftlabs = c("Study", "Seroma", "Total", "Seroma", "Total"))#
#
# Infection#
#
infection_aln = metabin(Infection_D, Drain, Infection_ND, NoDrain, studlab = AuthorYear, subset = !is.na(metadata_aln$Infection_ND)  & !is.na(metadata_aln$Infection_D),data = metadata_aln, sm = "OR", allstudies = FALSE)#
#
summary(infection_aln)#
#
metabias(infection_aln)#
#
funnel(infection_aln, comb.fixed = TRUE, yaxis = "size", cex.lab = 0.8)#
#
forest(infection_aln, allstudies = F, comb.fixed = TRUE, comb.random = TRUE, lab.e = "Drain", lab.c = "No-Drain", fontsize = 8, leftlabs = c("Study", "Infection", "Total", "Infection", "Total"))#
##########################################################################
#
## Hip arthroplasty#
#
metadata_ha = metadata[metadata$Procedure == "Hip arthroplasty",]#
#
# Hematoma, Healing, Abscess, Seroma - less than 3 studies with this outcome#
#
# Infection#
#
infection_ha = metabin(Infection_D, Drain, Infection_ND, NoDrain, studlab = AuthorYear, subset = !is.na(metadata_ha$Infection_ND)  & !is.na(metadata_ha$Infection_D),data = metadata_ha, sm = "OR", allstudies = FALSE)#
#
summary(infection_ha)#
#
metabias(infection_ha)#
#
funnel(infection_ha, comb.fixed = TRUE, yaxis = "size", cex.lab = 0.8)#
#
forest(infection_ha, allstudies = F, comb.fixed = TRUE, comb.random = TRUE, lab.e = "Drain", lab.c = "No-Drain", fontsize = 8, leftlabs = c("Study", "Infection", "Total", "Infection", "Total"))#
##########################################################################
#
## Knee arthroplasty#
#
metadata_ka = metadata[metadata$Procedure == "Knee arthroplasty",]#
#
# Hematoma, Healing, Abscess, Seroma - less than 3 studies with this outcome#
#
# Infection#
#
infection_ka = metabin(Infection_D, Drain, Infection_ND, NoDrain, studlab = AuthorYear, subset = !is.na(metadata_ka$Infection_ND)  & !is.na(metadata_ka$Infection_D),data = metadata_ka, sm = "OR", allstudies = FALSE)#
#
summary(infection_ka)#
#
metabias(infection_ka)#
#
funnel(infection_ka, comb.fixed = TRUE, yaxis = "size", cex.lab = 0.8)#
#
forest(infection_ka, allstudies = F, comb.fixed = TRUE, comb.random = TRUE, lab.e = "Drain", lab.c = "No-Drain", fontsize = 8, leftlabs = c("Study", "Infection", "Total", "Infection", "Total"))#
##########################################################################
#
## Clean Contaminated#
#
metadata_cc = metadata[which(metadata$CleanContaminated == 1), ]#
# Hematoma, Healing, Abscess, Seroma - less than 3 studies with this outcome#
#
# Infection#
#
infection_cc = metabin(Infection_D, Drain, Infection_ND, NoDrain, studlab = AuthorYear, subset = !is.na(metadata_cc$Infection_ND)  & !is.na(metadata_cc$Infection_D),data = metadata_cc, sm = "OR", allstudies = FALSE)#
#
summary(infection_cc)#
#
metabias(infection_cc)#
#
funnel(infection_cc, comb.fixed = TRUE, yaxis = "size", cex.lab = 0.8)#
#
forest(infection_cc, allstudies = F, comb.fixed = TRUE, comb.random = TRUE, lab.e = "Drain", lab.c = "No-Drain", fontsize = 8, leftlabs = c("Study", "Infection", "Total", "Infection", "Total"))#
##########################################################################
#
## Obese Patient#
#
metadata_op = metadata[which(metadata$ObesePatient == 1), ]#
# Hematoma#
#
hema_op = metabin(Hematoma_D, Drain, Hematoma_ND, NoDrain, studlab = AuthorYear, subset = !is.na(metadata_op$Hematoma_ND)  & !is.na(metadata_op$Hematoma_D), data = metadata_op, sm = "OR", allstudies = FALSE)#
#
summary(hema_op)#
#
metabias(hema_op)#
#
funnel(hema_op, comb.fixed = TRUE, yaxis = "size", cex.lab = 0.8)#
#
forest(hema_op, allstudies = F, comb.fixed = TRUE, comb.random = TRUE, lab.e = "Drain", lab.c = "No-Drain", fontsize = 8, leftlabs = c("Study", "Hematoma", "Total", "Hematoma", "Total"))#
# Healing#
#
heal_op = metabin(Healing_D, Drain, Healing_ND, NoDrain, studlab = AuthorYear, subset = !is.na(metadata_op$Healing_ND)  & !is.na(metadata_op$Healing_D),data = metadata_op, sm = "OR", allstudies = FALSE)#
#
summary(heal_op)#
#
metabias(heal_op)#
#
funnel(heal_op, comb.fixed = TRUE, yaxis = "size", cex.lab = 0.8)#
#
forest(heal_op, allstudies = F, comb.fixed = TRUE, comb.random = TRUE, lab.e = "Drain", lab.c = "No-Drain", fontsize = 8, leftlabs = c("Study", "Healing", "Total", "Healing", "Total"))#
# Abscess#
#
abscess_op = metabin(Abscess_D, Drain, Abscess_ND, NoDrain, studlab = AuthorYear, subset = !is.na(metadata_op$Abscess_ND)  & !is.na(metadata_op$Abscess_D),data = metadata_op, sm = "OR", allstudies = FALSE)#
#
summary(abscess_op)#
#
metabias(abscess_op)#
#
funnel(abscess_op, comb.fixed = TRUE, yaxis = "size", cex.lab = 0.8)#
#
forest(abscess_op, allstudies = F, comb.fixed = TRUE, comb.random = TRUE, lab.e = "Drain", lab.c = "No-Drain", fontsize = 8, leftlabs = c("Study", "Abscess", "Total", "Abscess", "Total"))#
# Seroma#
#
seroma_op = metabin(Seroma_D, Drain, Seroma_ND, NoDrain, studlab = AuthorYear, subset = !is.na(metadata_op$Seroma_ND)  & !is.na(metadata_op$Seroma_D),data = metadata_op, sm = "OR", allstudies = FALSE)#
#
summary(seroma_op)#
#
metabias(seroma_op)#
#
funnel(seroma_op, comb.fixed = TRUE, yaxis = "size", cex.lab = 0.8)#
#
forest(seroma_op, allstudies = F, comb.fixed = TRUE, comb.random = TRUE, lab.e = "Drain", lab.c = "No-Drain", fontsize = 8, leftlabs = c("Study", "Seroma", "Total", "Seroma", "Total"))#
# Infection#
#
infection_op = metabin(Infection_D, Drain, Infection_ND, NoDrain, studlab = AuthorYear, subset = !is.na(metadata_op$Infection_ND)  & !is.na(metadata_op$Infection_D), data = metadata_op, sm = "OR", allstudies = FALSE)#
#
summary(infection_op)#
#
metabias(infection_op)#
#
funnel(infection_op, comb.fixed = TRUE, yaxis = "size", cex.lab = 0.8)#
#
forest(infection_op, allstudies = F, comb.fixed = TRUE, comb.random = TRUE, lab.e = "Drain", lab.c = "No-Drain", fontsize = 8, leftlabs = c("Study", "Infection", "Total", "Infection", "Total"))#
##############
hema$group = addvar(hema, metadata, "Group", by.y = "AuthorYear")
print(datatable, tabular.environment='longtable', NA.string = "-", size = "small")
?metabias
hema = metabin(Hematoma_D, Drain, Hematoma_ND, NoDrain, studlab = AuthorYear, subset = !is.na(metadata$Hematoma_ND)  & !is.na(metadata$Hematoma_D), data = metadata, sm = "OR", allstudies = FALSE)
summary(hema)
metabias(hema)
metabias(hema)$p.value
abscess = metabin(Abscess_D, Drain, Abscess_ND, NoDrain, studlab = AuthorYear, subset = !is.na(metadata$Abscess_ND)  & !is.na(metadata$Abscess_D),data = metadata, sm = "OR", allstudies = FALSE)
summary(abscess)
metabias(abscess)
metabias(abscess, k.min = 7)
?meta
??meta
help(package="meta")
q()
install.packages(c("DAAG", "MASS", "ReadImages", "VennDiagram", "arm", "caTools", "countrycode", "deldir", "foreign", "gdata", "ggplot2", "gmodels", "gplots", "iterators", "maps", "nlme", "rgl", "rpart", "scales", "sp", "spdep", "survey", "survival"))
90*4
360/2
120*4
60+60+30+30
60+60+40+40
480/3
q()
135/1.8*7
135/2*3
135/2
135*6+125
q()
source("http://www.openintro.org/stat/data/arbuthnot.R")
arbuthnot
dim(arbuthnot)
source("http://www.openintro.org/stat/data/present.R")
source("http://www.openintro.org/stat/data/cdc.R")
download.file("http://www.openintro.org/stat/data/kobe.RData", destfile = "kobe.RData")load("kobe.RData")head(kobe)
load("/Users/mine/Dropbox/OI Labs/lab2/data/kobe.RData")
kobe_streak <- calc_streak(kobe$basket)barplot(table(kobe_streak))
outcomes <- c("heads", "tails")sample(outcomes, size = 1, replace = TRUE)
sim_fair_coin <- sample(outcomes, size = 100, replace = TRUE)
sim_fair_coin
sim_fair_cointable(sim_fair_coin)
sim_unfair_coin <- sample(outcomes, size = 100, replace = TRUE, prob = c(0.2, 0.8))
outcomes <- c("H", "M")sim_basket <- sample(outcomes, size = 1, replace = TRUE)
kobe$basketsim_basket
download.file("http://www.openintro.org/stat/data/bdims.RData", destfile = "bdims.RData")load("bdims.RData")
mdims <- subset(bdims, bdims$sex == 1)fdims <- subset(bdims, bdims$sex == 0)
fhgtmean <- mean(fdims$hgt)fhgtsd <- sd(fdims$hgt)
hist(fdims$hgt, probability = TRUE)x <- 140:190y <- dnorm(x = x, mean = fhgtmean, sd = fhgtsd)lines(x = x, y = y, col = "blue")
sim_norm <- rnorm(n = length(fdims$hgt), mean = fhgtmean, sd = fhgtsd)
qqnormsim(fdims$hgt)
sample_means50 <- rep(0, 5000)for (i in 1:5000) {    samp <- sample(area, 50)    sample_means50[i] <- mean(samp)}hist(sample_means50)
source("http://www.openintro.org/stat/data/ames.r")
source("http://www.openintro.org/stat/data/ames.R")
ames <- read.csv("http://www.openintro.org/stat/data/ames.csv")
area <- ames$Gr.Liv.Areaprice <- ames$SalePrice
samp1 <- sample(area, 50)
mean(samp1)
mean(area)
sample_means50 <- rep(0, 5000)for (i in 1:5000) {    samp <- sample(area, 50)    sample_means50[i] <- mean(samp)}hist(sample_means50)
sample_means50 <- rep(0, 5000)samp <- sample(area, 50)sample_means50[1] <- mean(samp)samp <- sample(area, 50)sample_means50[2] <- mean(samp)samp <- sample(area, 50)sample_means50[3] <- mean(samp)samp <- sample(area, 50)sample_means50[4] <- mean(samp)
sample_means50 <- rep(0, 5000)for (i in 1:5000) {    samp <- sample(area, 50)    sample_means50[i] <- mean(samp)}hist(sample_means50)
sample_means50 <- rep(0, 5000)for (i in 1:5000) {    samp <- sample(area, 50)    sample_means50[i] <- mean(samp)    print(i)}
hist(sample_means50)
sample_means10 <- rep(0, 5000)sample_means100 <- rep(0, 5000)for (i in 1:5000) {    samp <- sample(area, 10)    sample_means10[i] <- mean(samp)    samp <- sample(area, 100)    sample_means100[i] <- mean(samp)}
par(mfrow = c(3, 1))hist(sample_means10, breaks = 20, xlim = range(sample_means10))hist(sample_means50, breaks = 20, xlim = range(sample_means10))
hist(sample_means100, breaks = 20, xlim = range(sample_means10))
load("/Users/mine/Dropbox/OI Labs/lab7/data/mlb11.RData")
plot_ss(x = mlb11$at_bats, y = mlb11$runs, showSquares = TRUE)
goog <- read.csv("http://www.openintro.org/stat/data/goog.csv")
goog_sub <- subset(goog, country != "india")
goog_sub$dem <- relevel(goog_sub$dem, ref = "hybrid")
m_full <- lm(complied ~ requests + pop + hdi + dem + internet + freepress, data = goog_sub)summary(m_full)
m_step1 <- lm(complied ~ requests + pop + hdi + dem + freepress, data = goog_sub) summary(m_step1)
m_step1 <- lm(complied ~ requests + pop + hdi + dem + freepress, data = goog_sub)
summary(m_step1)
step(m_full)
m <- lm(complied ~ pop + hdi, data = goog_sub) summary(m)
m <- lm(complied ~ pop + hdi, data = goog_sub)
summary(m)
q()
ames = read.csv("~/Dropbox/OI Labs/lab4/lab4A/extras/data/ames.csv")
population <- ames$Gr.Liv.Area#
sample <- sample(population, 60)
sample_mean <- mean(sample)
se <- sd(sanple)/sqrt(60)#
lower <- xbar - 1.96 * se#
upper <- xbar + 1.96 * se#
c(lower, upper)
se <- sd(sample)/sqrt(60)#
lower <- xbar - 1.96 * se#
upper <- xbar + 1.96 * se#
c(lower, upper)
se <- sd(sample)/sqrt(60)#
lower <- sample_mean - 1.96 * se#
upper <- sample_mean + 1.96 * se#
c(lower, upper)
mean(population)
samp_mean <- rep(NA, 50) #
samp_sd <- rep(NA, 50)#
n <- 60
for(i in 1:50){#
  samp <- sample(pop, n) #
  samp_mean[i] <- mean(samp) #
  samp_sd[i] <- sd(samp)#
}
for(i in 1:50){#
  samp <- sample(population, n) #
  samp_mean[i] <- mean(samp) #
  samp_sd[i] <- sd(samp)#
}
lower <- samp_mean - 1.96 * samp_sd / sqrt(n) #
upper <- samp_mean + 1.96 * samp_sd / sqrt(n)
c(lower,upper)
lower
upper
c(lower[1],upper[1])
contains <- function(lo,hi,m){#
   if(m>= lo & m <= hi) return(TRUE)#
   else return(FALSE)#
}#
#
plot_ci <- function(lo, hi, m){#
  par(mar=c(2, 1, 1, 1), mgp=c(2.7, 0.7, 0))#
  k <- 50#
  ci.max <- max(rowSums(matrix(c(-1*lo,hi),ncol=2)))#
#
  xR <- m + ci.max*c(-1, 1)#
  yR <- c(0, 41*k/40)#
#
  plot(xR, yR, type='n', xlab='', ylab='', axes=FALSE)#
  abline(v=m, lty=2, col='#00000088')#
  axis(1, at=m, paste("mu = ",round(m,4)), cex.axis=1.15)#
  #axis(2)#
  for(i in 1:k){#
    x <- mean(c(hi[i],lo[i]))#
	  ci <- c(lo[i],hi[i])#
	  if(contains(lo[i],hi[i],m)==FALSE){#
		  col <- '#FF0000BB'#
		  points(x, i, cex=1.4, col=col)#
#		  points(x, i, pch=20, cex=1.2, col=col)#
		  lines(ci, rep(i, 2), col=col, lwd=5)#
	  }#
	  col <- 1#
  	points(x, i, pch=20, cex=1.2, col=col)#
	  lines(ci, rep(i, 2), col=col)#
  }#
}
plot_ci(lower, upper, mean(population))
plot_ci <- function(lo, hi, m, col = "#FF0000BB"){#
  par(mar=c(2, 1, 1, 1), mgp=c(2.7, 0.7, 0))#
  k <- 50#
  ci.max <- max(rowSums(matrix(c(-1*lo,hi),ncol=2)))#
#
  xR <- m + ci.max*c(-1, 1)#
  yR <- c(0, 41*k/40)#
#
  plot(xR, yR, type='n', xlab='', ylab='', axes=FALSE)#
  abline(v=m, lty=2, col='#00000088')#
  axis(1, at=m, paste("mu = ",round(m,4)), cex.axis=1.15)#
  #axis(2)#
  for(i in 1:k){#
    x <- mean(c(hi[i],lo[i]))#
	  ci <- c(lo[i],hi[i])#
	  if(contains(lo[i],hi[i],m)==FALSE){#
		  points(x, i, cex=1.4, col=col)#
#		  points(x, i, pch=20, cex=1.2, col=col)#
		  lines(ci, rep(i, 2), col=col, lwd=5)#
	  }#
	  col <- 1#
  	points(x, i, pch=20, cex=1.2, col=col)#
	  lines(ci, rep(i, 2), col=col)#
  }#
}
plot_ci(lower, upper, mean(population), col = "orange")
col()
colors()
plot_ci(lower, upper, mean(population), col = "darkorange")
plot_ci(lower, upper, mean(population), col = "blue")
plot_ci <- function(lo, hi, m, col = "#FF0000BB"){#
  par(mar=c(2, 1, 1, 1), mgp=c(2.7, 0.7, 0))#
  k <- 50#
  ci.max <- max(rowSums(matrix(c(-1*lo,hi),ncol=2)))#
#
  xR <- m + ci.max*c(-1, 1)#
  yR <- c(0, 41*k/40)#
#
  plot(xR, yR, type='n', xlab='', ylab='', axes=FALSE)#
  abline(v=m, lty=2, col='#00000088')#
  axis(1, at=m, paste("mu = ",round(m,4)), cex.axis=1.15)#
  #axis(2)#
  for(i in 1:k){#
    x <- mean(c(hi[i],lo[i]))#
	  ci <- c(lo[i],hi[i])#
	  if(contains(lo[i],hi[i],m)==FALSE){#
		  col <- 'blue'#
		  points(x, i, cex=1.4, col=col)#
#		  points(x, i, pch=20, cex=1.2, col=col)#
		  lines(ci, rep(i, 2), col=col, lwd=5)#
	  }#
	  col <- 1#
  	points(x, i, pch=20, cex=1.2, col=col)#
	  lines(ci, rep(i, 2), col=col)#
  }#
}
plot_ci(lower, upper, mean(population), col = "blue")
load("/Users/mine/Dropbox/oiStatistics/package/openintro/data/COL.rda")
COL
plot_ci <- function(lo, hi, m){#
  par(mar=c(2, 1, 1, 1), mgp=c(2.7, 0.7, 0))#
  k <- 50#
  ci.max <- max(rowSums(matrix(c(-1*lo,hi),ncol=2)))#
#
  xR <- m + ci.max*c(-1, 1)#
  yR <- c(0, 41*k/40)#
#
  plot(xR, yR, type='n', xlab='', ylab='', axes=FALSE)#
  abline(v=m, lty=2, col='#00000088')#
  axis(1, at=m, paste("mu = ",round(m,4)), cex.axis=1.15)#
  #axis(2)#
  for(i in 1:k){#
    x <- mean(c(hi[i],lo[i]))#
	  ci <- c(lo[i],hi[i])#
	  if(contains(lo[i],hi[i],m)==FALSE){#
		  col <- "#F05133"#
		  points(x, i, cex=1.4, col=col)#
#		  points(x, i, pch=20, cex=1.2, col=col)#
		  lines(ci, rep(i, 2), col=col, lwd=5)#
	  }#
	  col <- 1#
  	points(x, i, pch=20, cex=1.2, col=col)#
	  lines(ci, rep(i, 2), col=col)#
  }#
}
plot_ci(lower, upper, mean(population))
population <- ames$Gr.Liv.Area
sample <- sample(population, 60)
sample_mean <- mean(sample)
se <- sd(sample)/sqrt(60)lower <- sample_mean - 1.96 * seupper <- sample_mean + 1.96 * sec(lower, upper)
mean(population)
samp_mean <- rep(NA, 50)samp_sd <- rep(NA, 50)n <- 60
for (i in 1:50) {    samp <- sample(population, n)  # obtain a sample of size n = 60 from the population    samp_mean[i] <- mean(samp)  # save sample mean in ith element of samp_mean    samp_sd[i] <- sd(samp)  # save sample sd in ith element of samp_sd}
lower <- samp_mean - 1.96 * samp_sd/sqrt(n)upper <- samp_mean + 1.96 * samp_sd/sqrt(n)
c(lower[1], upper[1])
plot_ci(lower, upper, mean(population))
setwd("~/Dropbox/OI Labs/lab4/lab4B/data")
save(list=c("ames","plot_ci","contains"), file="ames.Rdata")
rm(list=ls())
load("/Users/mine/Dropbox/OI Labs/lab4/lab4B/data/ames.Rdata")
ls()
contains
plot_ci
ames
rm(ls=list())
rm(ls())
rm(list=ls())
nc = read.csv("~/Dropbox/OI Labs/lab5/v2 - knitr/data/nc.csv")
inference#
inference <- function(var1, var2 = NULL, est = c("mean", "median", "proportion"), outcome = NULL, order = NULL, nsim = 10000, conflevel = 0.95, null = NULL, alternative = c("less","greater","twosided"), type = c("ci","ht"), method = c("theoretical","simulation"), drawlines = "yes", simdist = FALSE){#
	# var1: variable 1, can be numeric or categorical#
	# var2: variable 2, categorical#
	# est: parameter to estimate, mean, median, or mode#
	# outcome: which outcome of the categorical variable to do inference on#
	# order: when var2 is given, order of groups in which to subtract parameters#
	# nsim: number of simulations#
	# level: confidence level, value between 0 and 1#
	# load openintro package#
	if(!("openintro" %in% names(installed.packages()[,"Package"]))){install.packages("openintro")}#
	if(!("BHH2" %in% names(installed.packages()[,"Package"]))){install.packages("BHH2")}#
	library(openintro)#
	library(BHH2)#
	# possible error: weird data#
	if(length(var1) == 1){stop("Sample size is only 1, check input.")}#
	# possible error: missing arguments#
	if(length(est) > 1){stop("Missing estimate: mean, median, or proportion")}#
	if(length(type) > 1){stop("Missing type: confidence interval or hypothesis test")}#
	if(length(method) > 1){stop("Missing method: theoretical or simulation")}#
	if(type == "ht" & is.null(null)){stop("Missing null value")}#
	if(type == "ht" & length(alternative) > 1){stop("Missing alternative: less, greater, or twosided")}#
	# possible error: method isn't theoretical or simulation#
	if(method %in% c("theoretical", "simulation") == FALSE){#
		stop("Method should be theoretical or simulation, check spelling and spaces.")#
	}#
	# possible error: type isn't ci or ht#
	if(type %in% c("ci", "ht") == FALSE){#
		stop("Type should be ci or ht, check spelling and spaces.")#
	}#
	# possible error: estimate isn't mean, median, or proportion#
	if(est %in% c("mean", "median", "proportion") == FALSE){#
		stop("Estimate should be mean, median, or proportion, check spelling and spaces.")#
	}#
	# possible error: variables not of same length#
	if (!is.null(var2)){#
		if (length(var1) != length(var2)) {stop("The two variables must be of same length.")}#
	}#
	# possible error: confidence level greater than 1#
	if(conflevel > 1){conflevel = conflevel / 100}#
	# possible error: drop NAs, and if var2 is given, use pairwise complete#
	if (is.null(var2)) {#
    	if (sum(is.na(var1)) > 0) {var1 = var1[!is.na(var1)]}#
  	}#
	if (!is.null(var2)) {#
    	if (sum(is.na(var1)) > 0 | sum(is.na(var2)) > 0) {#
      		var1.temp = var1[!is.na(var1) & !is.na(var2)]#
      		var2.temp = var2[!is.na(var1) & !is.na(var2)]#
      		var1 = var1.temp#
      		var2 = var2.temp#
    	}#
  	}#
#
	# if var1 or var2 is character, make factor#
	if(is.character(var1)){var1 = as.factor(var1)}#
	if(is.character(var2)){var2 = as.factor(var2)}#
#
	# set variable type for var1#
	type1 = "categorical"#
  	if (is.numeric(var1)) {type1 = "quantitative"}#
	# print variable types#
	if (!is.null(var2)) {#
    	type2 = "categorical"#
    	if(is.numeric(var2)){#
			type2 = "quantitative"#
    		cat(paste("Variable 1:", type1, ", Variable 2:", type2, "\n"))#
			}#
  	}#
	if (is.null(var2)) {#
    	type2 = "only1var"#
    	cat(paste("One", type1, "variable", "\n"))#
  	}#
#
	# the quantitative variable should be var1 if one categorical and one quantitative#
  	if (type1 == "categorical" & type2 == "quantitative") {#
    	var1.temp = var2#
    	var2.temp = var1#
    	var1 = var1.temp#
    	var2 = var2.temp#
    	type1 = "quantitative"#
    	type2 = "categorical"#
  	}#
#
	# possible error: wrong estimate#
	if(type1 == "quantitative" & est == "proportion"){#
		stop("Variable is quantitative, sample statistic cannot be a proportion, choose either mean or median")#
	}	#
	if(type1 == "categorical" & est == "mean"){#
		stop("Variable is categorical, sample statistic cannot be a mean or a median, use proportion")#
	}#
	if(type1 == "categorical" & est == "median"){#
		stop("Variable is categorical, sample statistic cannot be a mean or a median, use proportion")#
	}#
	# possible error: group variable has more than two levels#
	if(type2 == "categorical" & length(levels(var2)) > 2){#
		stop("Grouping variable (var2) can only have 2 levels.")#
	} #
	# possible errors about outcome#
	if(type1 == "categorical"){#
		# outcome not provided for categorical variable#
		if(is.null(outcome)){#
			stop("Variable is categorical, please specify which outcome you are interested in.")#
		}#
		# possible error: outcome provided is not a level of the categorical variable#
		if(outcome %in% levels(var1) == FALSE){#
			stop(paste(outcome,"is not a level of the outcome variable."))#
		}#
	}#
#
	# possible warning: outcome provided for numerical variable#
	if(type1 == "quantitative" & !is.null(outcome)){#
		warning("Outcome is ignored for numeric variable.\n")#
	}#
	# define sample size#
	n = length(var1)#
	# define sign of hypothesis test#
	if(type == "ht"){#
		if(alternative == "less"){sign = "<"}#
		if(alternative == "greater"){sign = ">"}#
		if(alternative == "twosided"){sign = "!="}		#
	}#
#
	# one variable#
	if(type2 == "only1var"){#
		cat("Single", est, "\n")#
		# set statistic: mean, median, or proportion#
		if(type1 == "quantitative"){statistic = match.fun(est)}#
		if(type1 == "categorical"){statistic = function(x){sum(x == outcome)/length(x)}}#
		actual = statistic(var1)#
		cat(paste("Observed", est, "=", round(actual, 4)), "\n")#
		# simulation#
		if(method == "simulation"){#
			sim = matrix(NA, nrow = n, ncol = nsim)#
			# bootstrap ci#
			if(type == "ci"){#
				cat("Bootstrapping, please wait...", "\n")#
				for(i in 1:nsim){sim[,i] = sample(var1, n, replace = TRUE)}#
				if(type1 == "categorical"){#
					statistic = function(x){#
						which_outcome = which(levels(var1) == outcome)#
						sum(x == which_outcome)/length(x)#
						}#
					}				#
				sim_dist = apply(sim, 2, statistic)#
#
				ci = quantile(sim_dist, c( (1 - conflevel)/2 , ((1 - conflevel)/2)+conflevel ))#
				if(nsim > 500){#
					counts = hist(sim_dist, plot = FALSE)$counts  #
					hist(sim_dist, main = "Bootstrap distribution", xlab = "bootstrap statistic")  #
				}#
				if(nsim <= 500){#
					counts = BHH2::dotPlot(sim_dist, main = "Bootstrap distribution", xlab = "bootstrap statistic")$y#
				}#
				for (i in 1:2) {#
			    	if(drawlines == "yes"){#
						segments(ci[i], 0, ci[i], 0.8 * max(counts), col="#225588", lwd=2)#
			    		text(round(ci[i],2), max(counts), pos=1, col="#225588", round(ci[i],2))#
					}#
			  	}#
#
				cat(c(conflevel*100, "% Bootstrap interval = (", round(ci[1],2), ",", round(ci[2],2), ")\n"))		#
			}#
			# randomization test#
			if(type == "ht"){#
				cat("Randomizing, please wait...", "\n")#
				if(type1 == "quantitative"){#
					for(i in 1:nsim){sim[,i] = sample(var1, n, replace = TRUE)}#
					sim_dist_temp = apply(sim, 2, statistic)#
					if(est == "mean"){#
						# hypotheses#
						cat(paste("H0: mu =", null, "\n"))#
						cat(paste("HA: mu", sign, null, "\n"))#
						sim_dist = sim_dist_temp - (mean(sim_dist_temp) - null)#
						#cat(mean(sim_dist))#
					}#
					if(est == "median"){#
						cat(paste("H0: median =", null, "\n"))#
						cat(paste("HA: median", sign, null, "\n"))#
						sim_dist = sim_dist_temp - (median(sim_dist_temp) - null)#
						#cat(median(sim_dist))#
					}					#
				}#
				if(type1 == "categorical"){#
					cat(paste("H0: p =", null, "\n"))#
					cat(paste("HA: p", sign, null, "\n"))#
					sim_dist = rbinom(nsim, n, prob = null) / n#
				}#
				smaller.tail = round(min(c(mean(sim_dist <= actual), mean(sim_dist >= actual))), 4)	#
				if(nsim > 500){#
					counts = hist(sim_dist, plot = FALSE)$counts  #
					hist(sim_dist, main = "Randomization distribution", xlab = "randomization statistic", ylim = c(0, 1.3 * max(counts)))  #
				}#
				if(nsim <= 500){#
					counts = BHH2::dotPlot(sim_dist, main = "Randomization distribution", xlab = "randomization statistic")$y#
				}				#
			    alternative = match.arg(alternative)#
#
				if(alternative == "less"){#
					if(actual < null){cat(paste("p-value: ", smaller.tail,"\n"))}				#
					if(actual > null){cat(paste("p-value: ", 1 - smaller.tail,"\n"))}#
					if(drawlines == "yes"){lines(x = c(actual,actual), y = c(0,1.1*max(counts)), col="#225588", lwd=2)}#
				}#
				if(alternative == "greater"){#
					if(actual < null){cat(paste("p-value: ", 1 - smaller.tail,"\n"))}				#
					if(actual > null){cat(paste("p-value: ", smaller.tail,"\n"))}#
					if(drawlines == "yes"){lines(x = c(actual,actual), y = c(0,1.1*max(counts)), col="#225588", lwd=2)}#
				}#
				if(alternative == "twosided"){#
					cat(paste("p-value: ", smaller.tail * 2,"\n"))#
					lines(x = c(actual,actual), y = c(0,1.1*max(counts)), col="#225588", lwd=2)#
					if(actual >= null){#
						temp = actual - null#
						if(drawlines == "yes"){lines(x = c(null - temp,null - temp), y = c(0,1.1*max(counts)), col = "#225588", lwd=2)}						#
					}#
					if(actual < null){#
						temp = null - actual#
						if(drawlines == "yes"){lines(x = c(null + temp,null + temp), y = c(0,1.1*max(counts)), col = "#225588", lwd=2)}						#
					}		#
				}#
			  	if(drawlines == "yes"){text(x = actual, y = 1.2*max(counts), paste("observed\n", round(actual,4)), col = "#225588", cex = 0.8)}								#
			}		#
		}#
		# theoretical#
		if(method == "theoretical"){#
			# confidence interval#
			if(type == "ci"){#
				if(type1 == "quantitative"){#
					if(est == "median"){stop("Use simulation methods for inference for the median.")}#
					if(est == "mean"){#
						# check conditions#
						hist(var1, main = "Histogram of sample data", xlab = "sample data")	#
						cat("Check histogram to verify that sample data do not come from an extremely skewed distribution.\n")#
						# calculate me and se#
						se = sd(var1) / sqrt(n)#
						cat(paste("Standard error =", round(se, 4), "\n"))#
						if(n >= 50) {critvalue = qnorm( (1 - conflevel)/2 + conflevel )}#
						if(n < 50) {critvalue = qt( (1 - conflevel)/2 + conflevel , df = n - 1)}					#
					}#
				}#
				if(type1 == "categorical"){#
					# check conditions#
					suc = round(n * actual, 2)#
					fail = round(n * (1 - actual), 2)#
					cat(paste("Number of successes =", round(suc), ";", "Number of failures =", round(fail)), "\n")	#
					if(suc < 10 | fail < 10){#
						stop("There aren't at least 10 successes and 10 failures, use simulation methods instead.")#
					}#
					# calculate me and se#
					se = sqrt(actual * (1-actual) / n)#
					cat(paste("Standard error =", round(se, 4), "\n"))#
					critvalue = qnorm( (1 - conflevel)/2 + conflevel )					#
				}#
				me = critvalue * se#
				ci = c(actual - me , actual + me)#
				cat(c(conflevel*100, "% Confidence interval = (", round(ci[1],2), ",", round(ci[2],2), ")\n"))	#
			}#
			# hypothesis test#
			if(type == "ht"){#
				if(type1 == "quantitative"){#
					if(est == "median"){stop("Use simulation methods for inference for the median.")}#
					if(est == "mean"){#
						# hypotheses#
						cat(paste("H0: mu =", null, "\n"))#
						cat(paste("HA: mu", sign, null, "\n"))#
						# check conditions#
						par(mfrow = c(1,2))#
						hist(var1, main = "Histogram of sample data", xlab = "sample data")	#
						cat("Check histogram to verify that sample data do not come from an extremely skewed distribution.\n")#
						# calculate test statistic and p-value component#
						se = sd(var1) / sqrt(n)#
						cat("Standard error =", round(se,4), "\n")#
						teststat = (actual - null)/se#
						if(n >= 50){#
							cat(paste("Test statistic: Z = ", round(teststat, 3),"\n"))#
							smaller.tail = round(min(pnorm(teststat), pnorm(teststat, lower.tail = FALSE)), 4)#
							}#
						if(n < 50){#
							cat(paste("Test statistic: T = ", round(teststat, 3),"\n"))#
							cat(paste("Degrees of freedom: ", n - 1, "\n"))#
							smaller.tail = round(min(pt(teststat, df = n - 1), pt(teststat, df = n - 1, lower.tail = FALSE)), 4)#
							}		#
					}#
				}#
				if(type1 == "categorical"){#
					if(null < 0 | null > 1){#
						stop("Null value should be a proportion between 0 and 1.")#
					}#
					# hypotheses#
					cat(paste("H0: p =", null, "\n"))#
					cat(paste("HA: p", sign, null, "\n"))#
					# check conditions#
					exp_suc = round(n * null, 2)#
					exp_fail = round(n * (1 - null), 2)#
					cat(paste("Number of expected successes =", round(exp_suc), ";", "Number of expected failures =", round(exp_fail)), "\n")#
					if(exp_suc < 10 | exp_fail < 10){#
						stop("There aren't at least 10 expected successes and 10 expected failures, use simulation methods instead.")#
					}#
					# calculate test statistic and p-value#
					se = sqrt(null * (1 - null) / n)#
					cat("Standard error =", round(se,4), "\n")#
					teststat = (actual - null)/se#
					cat(paste("Test statistic: Z = ", round(teststat, 3),"\n"))#
					smaller.tail = round(min(pnorm(teststat), pnorm(teststat, lower.tail = FALSE)), 4)					#
				}#
#
				# alternative = less#
				if(alternative == "less"){#
					if(actual < null){cat(paste("p-value: ", smaller.tail,"\n"))}				#
					if(actual > null){cat(paste("p-value: ", 1 - smaller.tail,"\n"))}#
					normTail(L = teststat, axes = FALSE, col = "#22558833")#
					axis(1, at = c(-3, teststat, 0, 3), labels = c(NA, paste(round(actual,2)), paste(null), NA))#
				}#
#
				# alternative = greater#
				if(alternative == "greater"){#
					if(actual < null){cat(paste("p-value: ", 1 - smaller.tail,"\n"))}				#
					if(actual > null){cat(paste("p-value: ", smaller.tail,"\n"))}#
					normTail(U = teststat, axes = FALSE, col = "#22558833")#
					axis(1, at = c(-3, 0, teststat, 3), labels = c(NA, paste(null), paste(round(actual,2)), NA))#
				}#
				# alternative = twosided	#
				if(alternative == "twosided"){#
					cat(paste("p-value: ", smaller.tail * 2,"\n"))#
					if(actual < null){#
						normTail(L = teststat, U = -1*teststat, axes = FALSE, col = "#22558833")#
						axis(1, at = c(-3, teststat, 0, -1*teststat, 3), labels = c(NA, paste(round(actual,2)), paste(null), paste(round(null + (null - actual), 2)), NA))#
					}#
					if(actual > null){#
						normTail(L = -1*teststat, U = teststat, axes = FALSE, col = "#22558833")#
						axis(1, at = c(-3, -1*teststat, 0, teststat, 3), labels = c(NA, paste(round(null - (actual - null), 2)), paste(null), paste(round(actual,2)), NA))#
					}				#
				}#
				par(mfrow = c(1,1))#
			}#
		}#
	}	#
	# two variables#
	if(type2 == "categorical"){#
#
		# order#
		if(is.null(order)){order = levels(var2)}#
		if(length(order) == 1 & !is.na(order[1])){#
			stop("Please provide two levels for order.")#
		}#
		if(length(order) == 2){#
			if( all(order %in% levels(var2)) == FALSE){#
				str = paste(order[which(!(order %in% levels(var2)))], collapse=" ")#
				stop(paste(str,": not a category of the group variable",sep = " "))#
			}#
			if((sum(levels(var2) == order) == 0) == TRUE){#
				group = relevel(var2, ref = levels(as.factor(var2))[2])#
			}	#
			if((sum(levels(var2) == order) == 0) == FALSE){#
				group = var2#
			}		#
		}#
#
		# print what's going on#
		if(type1 == "quantitative"){#
			cat("One quantitative and one categorical variable\n")#
		}#
		if(type1 == "categorical"){#
			cat("Two categorical variables\n")#
		}#
		cat("Difference between two ", est, "s", "\n", sep = "")#
#
		# calculate sample sizes#
	  	n1 = sum(group==levels(as.factor(group))[1])#
	  	n2 = sum(group==levels(as.factor(group))[2])#
		# print sample sizes#
		n1_print = paste("n_", order[1], sep = "")		#
		n2_print = paste("n_", order[2], sep = "")		#
		cat(paste(n1_print, "=", n1, ";", n2_print, "=", n2, "\n"))#
#
		# set statistic: difference between means, medians, or proportions#
		if(type1 == "quantitative"){#
			statistic <- function(var1, group){	#
				if(est == "mean"){#
					stat = mean(var1[group == levels(as.factor(group))[1]]) - mean(var1[group == levels(as.factor(group))[2]])					#
				}#
				if(est == "median"){#
					stat = median(var1[group == levels(as.factor(group))[1]]) - median(var1[group == levels(as.factor(group))[2]])										#
				}#
				return(stat)#
			}#
		}#
		if(type1 == "categorical"){#
			statistic <- function(var1, group){	#
				sum(var1 == outcome & group == levels(as.factor(group))[1])/n1 - sum(var1 == outcome & group == levels(as.factor(group))[2])/n2 #
			}#
    	}#
#
		# calculate and print actual#
		actual = statistic(var1, group)#
		cat("Observed difference between ", est, "s = ", round(actual,4), "\n", sep = "")#
#
		# save label#
		label = paste("Difference in sample ", est, "s", ", ", levels(as.factor(group))[1],"-",levels(as.factor(group))[2], sep = "")#
		# simulation#
		if(method == "simulation"){#
			n = length(var1)#
			sim = matrix(NA, nrow = n, ncol = nsim)#
			# bootstrap ci#
			if(type == "ci"){#
				cat("Bootstrapping, please wait...", "\n")#
				if(type1 == "quantitative"){statistic = match.fun(est)}#
				if(type1 == "categorical"){#
					statistic = function(x){#
						which_outcome = which(levels(var1) == outcome)#
						sum(x == which_outcome)/length(x)#
					}#
				}#
				sim1 = matrix(NA, nrow = n1, ncol = nsim)#
				sim2 = matrix(NA, nrow = n2, ncol = nsim)#
#
				for(i in 1:nsim){sim1[,i] = sample(var1[group == order[1]], n1, replace = TRUE)}#
				for(i in 1:nsim){sim2[,i] = sample(var1[group == order[2]], n2, replace = TRUE)}#
				sim_dist1 = apply(sim1, 2, statistic)#
				sim_dist2 = apply(sim2, 2, statistic)#
				sim_dist = sim_dist1 - sim_dist2#
				ci = quantile(sim_dist, c( (1 - conflevel)/2 , ((1 - conflevel)/2)+conflevel ))#
				if(nsim > 500){#
					counts = hist(sim_dist, plot = FALSE)$counts  #
					hist(sim_dist, main = "Bootstrap distribution", xlab = "bootstrap statistic")  #
				}#
				if(nsim <= 500){#
					counts = BHH2::dotPlot(sim_dist, main = "Bootstrap distribution", xlab = "bootstrap statistic")$y#
				}#
				for (i in 1:2) {#
			    	if(drawlines == "yes"){#
						segments(ci[i], 0, ci[i], 0.8 * max(counts), col="#225588", lwd=2)#
			    		text(round(ci[i],2), max(counts), pos=1, col="#225588", round(ci[i],2))#
					}#
			  	}#
#
				cat(c(conflevel*100, "% Bootstrap interval = (", round(ci[1],2), ",", round(ci[2],2), ")\n"))#
			}#
			# randomization test			#
			if(type == "ht"){#
				# hypotheses#
				if(est == "mean"){#
					mu1 = paste("mu_", order[1], sep = "")		#
					mu2 = paste("mu_", order[2], sep = "")		#
					cat(paste("H0:", mu1 , "-", mu2, "=", null, "\n"))#
					cat(paste("HA:", mu1 , "-", mu2, sign, null, "\n"))#
				}#
				if(est == "median"){#
					med1 = paste("median_", order[1], sep = "")		#
					med2 = paste("median_", order[2], sep = "")		#
					cat(paste("H0:", med1 , "-", med2, "=", null, "\n"))#
					cat(paste("HA:", med1 , "-", med2, sign, null, "\n"))#
				}#
				if(est == "proportion"){#
					p1 = paste("p_", order[1], sep = "")		#
					p2 = paste("p_", order[2], sep = "")		#
					cat(paste("H0:", p1 , "-", p2, "=", null, "\n"))#
					cat(paste("HA:", p1 , "-", p2, sign, null, "\n"))#
				}#
				cat("Randomizing, please wait...", "\n")#
				for(i in 1:nsim){sim[,i] = sample(group, n, replace = FALSE)}#
				sim_dist = apply(sim, 2, statistic, var1 = var1)#
				smaller.tail = round(min(c(mean(sim_dist <= actual), mean(sim_dist >= actual))), 4)#
				xmin = min(c(-1.1*abs(actual), sim_dist))#
			  	xmax = max(c(1.1*actual, sim_dist))#
				if(nsim > 500){#
					counts = hist(sim_dist, plot = FALSE)$counts  #
					hist(sim_dist, main = "Randomization distribution", xlab = "randomization statistic", ylim = c(0, 1.3 * max(counts)), xlim = c(xmin,xmax))  #
				}#
				if(nsim <= 500){#
					counts = BHH2::dotPlot(sim_dist, main = "Randomization distribution", xlab = "randomization statistic", xlim = c(xmin,xmax))$y#
				}#
			    alternative = match.arg(alternative)#
#
				if(alternative == "less"){#
					if(actual < null){cat(paste("p-value: ", smaller.tail,"\n"))}				#
					if(actual > null){cat(paste("p-value: ", 1 - smaller.tail,"\n"))}#
					if(drawlines == "yes"){lines(x = c(actual,actual), y = c(0,1.1*max(counts)), col="#225588", lwd=2)}#
				}#
				if(alternative == "greater"){#
					if(actual < null){cat(paste("p-value: ", 1 - smaller.tail,"\n"))}				#
					if(actual > null){cat(paste("p-value: ", smaller.tail,"\n"))}#
					if(drawlines == "yes"){lines(x = c(actual,actual), y = c(0,1.1*max(counts)), col="#225588", lwd=2)}#
				}#
				if(alternative == "twosided"){#
					cat(paste("p-value: ", smaller.tail * 2,"\n"))#
					if(drawlines == "yes"){lines(x = c(actual,actual), y = c(0,1.1*max(counts)), col="#225588", lwd=2)}#
					if(actual >= null){#
						temp = actual - null#
						if(drawlines == "yes"){lines(x = c(null - temp,null - temp), y = c(0,1.1*max(counts)), col = "#225588", lwd=2)}						#
					}#
					if(actual < null){#
						temp = null - actual#
						if(drawlines == "yes"){lines(x = c(null + temp,null + temp), y = c(0,1.1*max(counts)), col = "#225588", lwd=2)}						#
					}		#
				}#
				if(drawlines == "yes"){text(x = actual, y = 1.25*max(counts), paste("observed\n", round(actual,4)), col = "#225588", cex = 0.8)}								#
			}#
#
		}#
		# theoretical#
		if(method == "theoretical"){#
			# confidence interval#
			if(type == "ci"){#
				if(type1 == "quantitative"){#
					if(est == "median"){stop("Use simulation methods for inference for the median.")#
					}#
					if(est == "mean"){#
						# check conditions#
						boxplot(var1 ~ var2, main = "Boxplot of sample data", xlab = "sample data")#
						cat("Check boxplot to verify that sample data do not come from extremely skewed distributions.\n")#
						# calculate se and critvalue#
						s1 = sd(var1[group == levels(group)[1]])#
						s2 = sd(var1[group == levels(group)[2]])#
						se = sqrt(s1^2/n1 + s2^2/n2)#
						cat("Standard error =", round(se,4), "\n")#
						if(n1 >= 50 & n2 >= 50){critvalue = qnorm( (1 - conflevel)/2 + conflevel )}#
						if(n1 < 50 | n2 < 50) {critvalue = qt( (1 - conflevel)/2 + conflevel , df = min(n1 - 1, n2 - 1))}						#
					}#
				}#
				if(type1 == "categorical"){#
					# check conditions#
					suc1 = sum(var1[group == levels(group)[1]] == outcome)#
					fail1 = sum(var1[group == levels(group)[1]] != outcome)#
					cat(paste("Group 1: Number of successes =", round(suc1), ";", "Number of failures =", round(fail1)), "\n")	#
					suc2 = sum(var1[group == levels(group)[2]] == outcome)#
					fail2 = sum(var1[group == levels(group)[2]] != outcome)#
					cat(paste("Group 2: Number of successes =", round(suc2), ";", "Number of failures =", round(fail2)), "\n")#
					if(suc1 < 10 | fail1 < 10 | suc2 < 10 | fail2 < 10){#
						stop("There aren't at least 10 successes and 10 failures, use simulation methods instead.")#
					}#
					# calculate se and critvalue#
					p1 = suc1 / n1#
					p2 = suc2 / n2#
					se = sqrt(p1 * (1-p1)/n1 + p2 * (1-p2)/n2)#
					cat("Standard error =", round(se,4), "\n")#
					critvalue = qnorm( (1 - conflevel)/2 + conflevel )					#
				}#
				# calculate ci#
				me = critvalue * se#
				ci = c(actual - me , actual + me)#
				cat(c(conflevel*100, "% Confidence interval = (", round(ci[1],2), ",", round(ci[2],2), ")\n"))#
			}#
			# hypothesis test#
			if(type == "ht"){#
				if(type1 == "quantitative"){#
					if(est == "median"){stop("Use simulation methods for inference for the median.")#
					}#
					if(est == "mean"){#
						# hypotheses#
						mu1 = paste("mu_", order[1], sep = "")		#
						mu2 = paste("mu_", order[2], sep = "")		#
						cat(paste("H0:", mu1 , "-", mu2, "=", null, "\n"))#
						cat(paste("HA:", mu1 , "-", mu2, sign, null, "\n"))#
						# check conditions#
						par(mfrow = c(1,2))#
						boxplot(var1 ~ var2, main = "Boxplot of sample data", xlab = "sample data")#
						cat("Check boxplot to verify that sample data do not come from extremely skewed distributions.\n")#
						# calculate test statistic and p-value component#
						s1 = sd(var1[group == levels(group)[1]])#
						s2 = sd(var1[group == levels(group)[2]])#
						se = sqrt(s1^2/n1 + s2^2/n2)#
						cat("Standard error =", round(se,3), "\n")#
						teststat = (actual - null)/se#
						if(n1 >= 50 & n2 >= 50){#
							cat(paste("Test statistic: Z = ", round(teststat, 3),"\n"))#
							smaller.tail = round(min(pnorm(teststat), pnorm(teststat, lower.tail = FALSE)), 4)#
							}#
						if(n1 < 50 | n2 < 50) {#
							cat(paste("Test statistic: T = ", round(teststat, 3),"\n"))#
							cat(paste("Degrees of freedom: ", min(n1 - 1, n2 - 1), "\n"))#
							smaller.tail = round(min(pt(teststat, df = min(n1 - 1, n2 - 1)), pt(teststat, df = min(n1 - 1, n2 - 1), lower.tail = FALSE)), 4)#
							}						#
					}	#
				}#
				if(type1 == "categorical"){#
					if(null <= -1 | null >= 1){#
						stop("Null value should be a proportion between 0 and 1.")#
					}#
					# hypotheses#
					p1 = paste("p_", order[1], sep = "")		#
					p2 = paste("p_", order[2], sep = "")		#
					cat(paste("H0:", p1 , "-", p2, "=", null, "\n"))#
					cat(paste("HA:", p1 , "-", p2, sign, null, "\n"))#
#
					# calculate p_pool#
					suc1 = sum(var1[group == levels(group)[1]] == outcome)#
					fail1 = sum(var1[group == levels(group)[1]] != outcome)#
					suc2 = sum(var1[group == levels(group)[2]] == outcome)#
					fail2 = sum(var1[group == levels(group)[2]] != outcome)#
					p_pool =  (suc1 + suc2)/(n1 + n2)#
					cat(paste("Pooled proportion =", round(p_pool, 4), "\n"))	#
					# check conditions#
					exp_suc1 = n1 * p_pool#
					exp_fail1 = n1 * (1 - p_pool)#
					cat(paste("Group 1: Number of expected successes =", round(exp_suc1), ";", "Number of expected failures =", round(exp_fail1)), "\n")#
					exp_suc2 = n2 * p_pool#
					exp_fail2 = n2 * (1 - p_pool)#
					cat(paste("Group 2: Number of expected successes =", round(exp_suc2), ";", "Number of expected failures =", round(exp_fail2)), "\n")#
					if(exp_suc1 < 10 | exp_fail1 < 10 | exp_suc2 < 10 | exp_fail2 < 10){#
						stop("There aren't at least 10 expected successes and 10 expected failures, use simulation methods instead.")#
					}#
					# calculate test statistic and p-value#
					se = sqrt( p_pool * (1 - p_pool) / n1 + p_pool * (1 - p_pool) / n2 )#
					cat("Standard error =", round(se,3), "\n")#
					teststat = (actual - null) / se#
					cat(paste("Test statistic: Z = ", round(teststat, 3),"\n"))#
					smaller.tail = round(min(pnorm(teststat), pnorm(teststat, lower.tail = FALSE)), 4)								#
				}#
				# alternative = less#
				if(alternative == "less"){#
					if(actual < null){cat(paste("p-value: ", smaller.tail,"\n"))}				#
					if(actual > null){cat(paste("p-value: ", 1 - smaller.tail,"\n"))}#
					normTail(L = teststat, axes = FALSE, col = "#22558833")#
					axis(1, at = c(-3, teststat, 0, 3), labels = c(NA, paste(round(actual,2)), paste(null), NA))#
				}#
				# alternative = greater#
				if(alternative == "greater"){#
					if(actual < null){cat(paste("p-value: ", 1 - smaller.tail,"\n"))}				#
					if(actual > null){cat(paste("p-value: ", smaller.tail,"\n"))}#
					normTail(U = teststat, axes = FALSE, col = "#22558833")#
					axis(1, at = c(-3, 0, teststat, 3), labels = c(NA, paste(null), paste(round(actual,2)), NA))#
				}				#
				# alternative = twosided	#
				if(alternative == "twosided"){#
					cat(paste("p-value: ", smaller.tail * 2,"\n"))#
					if(actual < null){#
						normTail(L = teststat, U = -1*teststat, axes = FALSE, col = "#22558833")#
						axis(1, at = c(-3, teststat, 0, -1*teststat, 3), labels = c(NA, paste(round(actual,2)), paste(null), paste(round(null + (null - actual), 2)), NA))#
					}#
					if(actual > null){#
						normTail(L = -1*teststat, U = teststat, axes = FALSE, col = "#22558833")#
						axis(1, at = c(-3, -1*teststat, 0, teststat, 3), labels = c(NA, paste(round(null - (actual - null), 2)), paste(null), paste(round(actual,2)), NA))#
					}				#
				}#
				par(mfrow = c(1,1))#
#
			}#
		}#
	}#
	if(simdist == TRUE){return(sim_dist)}#
}
setwd("~/Dropbox/OI Labs/lab5/v2 - knitr/data")
save(list=c("nc","inference"), file = "nc.RData")
rm(list=ls())
ls()
load("/Users/mine/Dropbox/OI Labs/lab5/v2 - knitr/data & code/nc.RData")
ls()
nc
inference
by(nc$weight, nc$habit, mean)
by(nc$weight, nc$habit, sd)
by(nc$weight, nc$habit, summary)
by(nc$weight, nc$habit, length)
inference
inference(data = nc$weight, group = nc$habit, est = "mean", type = "ht", null = 0, alternative = "twosided", method = "theoretical")
inference
rm(list=ls())
ls()
nc = read.csv("~/Dropbox/OI Labs/lab5/v2 - knitr/data & code/nc.csv")
inference#
inference <- function(data, group = NULL, est = c("mean", "median", "proportion"), success = NULL, order = NULL, nsim = 10000, conflevel = 0.95, null = NULL, alternative = c("less","greater","twosided"), type = c("ci","ht"), method = c("theoretical","simulation"), drawlines = "yes", simdist = FALSE){#
	# data: variable 1, can be quantitative or categorical#
	# group: variable 2, categorical (optional)#
	# est: parameter to estimate, mean, median, or mode#
	# success: which level of the categorical variable to call "success", i.e. do inference on#
	# order: when group is given, order of groups in which to subtract parameters#
	# nsim: number of simulations#
	# level: confidence level, value between 0 and 1#
	# load openintro package#
	if(!("openintro" %in% names(installed.packages()[,"Package"]))){install.packages("openintro")}#
	if(!("BHH2" %in% names(installed.packages()[,"Package"]))){install.packages("BHH2")}#
	library(openintro)#
	library(BHH2)#
	# possible error: weird data#
	if(length(data) == 1){stop("Sample size is only 1, check input data.")}#
	# possible error: missing arguments#
	if(length(est) > 1){stop("Missing estimate: mean, median, or proportion")}#
	if(length(type) > 1){stop("Missing type: confidence interval or hypothesis test")}#
	if(length(method) > 1){stop("Missing method: theoretical or simulation")}#
	if(type == "ht" & is.null(null)){stop("Missing null value")}#
	if(type == "ht" & length(alternative) > 1){stop("Missing alternative: less, greater, or twosided")}#
	# possible error: method isn't theoretical or simulation#
	if(method %in% c("theoretical", "simulation") == FALSE){#
		stop("Method should be theoretical or simulation, check spelling and spaces.")#
	}#
	# possible error: type isn't ci or ht#
	if(type %in% c("ci", "ht") == FALSE){#
		stop("Type should be ci or ht, check spelling and spaces.")#
	}#
	# possible error: estimate isn't mean, median, or proportion#
	if(est %in% c("mean", "median", "proportion") == FALSE){#
		stop("Estimate should be mean, median, or proportion, check spelling and spaces.")#
	}#
	# possible error: variables not of same length#
	if (!is.null(group)){#
		if (length(data) != length(group)) {stop("The two variables must be of same length.")}#
	}#
	# possible error: confidence level greater than 1#
	if(conflevel > 1){conflevel = conflevel / 100}#
	# possible error: drop NAs, and if group is given, use pairwise complete#
	if (is.null(group)) {#
    	if (sum(is.na(data)) > 0) {data = data[!is.na(data)]}#
  	}#
	if (!is.null(group)) {#
    	if (sum(is.na(data)) > 0 | sum(is.na(group)) > 0) {#
      		data.temp = data[!is.na(data) & !is.na(group)]#
      		group.temp = group[!is.na(data) & !is.na(group)]#
      		data = data.temp#
      		group = group.temp#
    	}#
  	}#
#
	# if data or group is character, make factor#
	if(is.character(data)){data = as.factor(data)}#
	if(is.character(group)){group = as.factor(group)}#
#
	# set variable type for data#
	data_type = "categorical"#
  	if (is.numeric(data)) {data_type = "quantitative"}#
	# print variable types#
	if (!is.null(group)) {#
    	group_type = "categorical"#
    	if(is.numeric(group)){#
			group_type = "quantitative"#
    		cat(paste("Variable 1:", data_type, ", Variable 2:", group_type, "\n"))#
			}#
  	}#
	if (is.null(group)) {#
    	group_type = "only1var"#
    	cat(paste("One", data_type, "variable", "\n"))#
  	}#
#
	# the quantitative variable should be data if one categorical and one quantitative#
  	if (data_type == "categorical" & group_type == "quantitative") {#
    	data.temp = group#
    	group.temp = data#
    	data = data.temp#
    	group = group.temp#
    	data_type = "quantitative"#
    	group_type = "categorical"#
  	}#
#
	# possible error: wrong estimate#
	if(data_type == "quantitative" & est == "proportion"){#
		stop("Variable is quantitative, sample statistic cannot be a proportion, choose either mean or median")#
	}	#
	if(data_type == "categorical" & est == "mean"){#
		stop("Variable is categorical, sample statistic cannot be a mean or a median, use proportion")#
	}#
	if(data_type == "categorical" & est == "median"){#
		stop("Variable is categorical, sample statistic cannot be a mean or a median, use proportion")#
	}#
	# possible error: group variable has more than two levels#
	if(group_type == "categorical" & length(levels(group)) > 2){#
		stop("Grouping variable (group) can only have 2 levels.")#
	} #
	# possible errors about success#
	if(data_type == "categorical"){#
		# success not provided for categorical variable#
		if(is.null(success)){#
			stop("Variable is categorical, specify which level to call success.")#
		}#
		# possible error: success provided is not a level of the categorical variable#
		if(success %in% levels(data) == FALSE){#
			stop(paste(success,"is not a level of the success variable."))#
		}#
	}#
#
	# possible warning: success provided for quantitative variable#
	if(data_type == "quantitative" & !is.null(success)){#
		warning("`success' is ignored for quantitative variable.\n")#
	}#
	# define sample size#
	n = length(data)#
	# define sign of hypothesis test#
	if(type == "ht"){#
		if(alternative == "less"){sign = "<"}#
		if(alternative == "greater"){sign = ">"}#
		if(alternative == "twosided"){sign = "!="}		#
	}#
#
	# one variable#
	if(group_type == "only1var"){#
		cat("Single", est, "\n")#
		# set statistic: mean, median, or proportion#
		if(data_type == "quantitative"){statistic = match.fun(est)}#
		if(data_type == "categorical"){statistic = function(x){sum(x == success)/length(x)}}#
		actual = statistic(data)#
		cat(paste("Observed", est, "=", round(actual, 4)), "\n")#
		# simulation#
		if(method == "simulation"){#
			sim = matrix(NA, nrow = n, ncol = nsim)#
			# bootstrap ci#
			if(type == "ci"){#
				cat("Bootstrapping, please wait...", "\n")#
				for(i in 1:nsim){sim[,i] = sample(data, n, replace = TRUE)}#
				if(data_type == "categorical"){#
					statistic = function(x){#
						which_success = which(levels(data) == success)#
						sum(x == which_success)/length(x)#
						}#
					}				#
				sim_dist = apply(sim, 2, statistic)#
#
				ci = quantile(sim_dist, c( (1 - conflevel)/2 , ((1 - conflevel)/2)+conflevel ))#
				if(nsim > 500){#
					counts = hist(sim_dist, plot = FALSE)$counts#
					hist(sim_dist, main = "Bootstrap distribution", xlab = "bootstrap statistic")  #
				}#
				if(nsim <= 500){#
					counts = table(sim_dist)#
					plot(sim_dist, type = "n", ylim = c(0,max(counts)), axes = FALSE, xlim = c(0.9*min(sim_dist),1.1*max(sim_dist)), main = "Bootstrap distribution", xlab = "bootstrap statistic", ylab = "")#
					axis(1)#
					axis(2)#
					for(i in 1:length(sim_dist)){#
						x   <- sim_dist[i]#
						rec <- sum(sim_dist == x)#
						points(rep(x, rec), 1:rec, pch=20, cex=0.8)#
					}#
				}#
				for (i in 1:2) {#
			    	if(drawlines == "yes"){#
						segments(ci[i], 0, ci[i], 0.8 * max(counts), col="#225588", lwd=2)#
			    		text(round(ci[i],2), max(counts), pos=1, col="#225588", round(ci[i],2))#
					}#
			  	}#
#
				cat(c(conflevel*100, "% Bootstrap interval = (", round(ci[1],2), ",", round(ci[2],2), ")\n"))		#
			}#
			# randomization test#
			if(type == "ht"){#
				cat("Randomizing, please wait...", "\n")#
				if(data_type == "quantitative"){#
					for(i in 1:nsim){sim[,i] = sample(data, n, replace = TRUE)}#
					sim_dist_temp = apply(sim, 2, statistic)#
					if(est == "mean"){#
						# hypotheses#
						cat(paste("H0: mu =", null, "\n"))#
						cat(paste("HA: mu", sign, null, "\n"))#
						sim_dist = sim_dist_temp - (mean(sim_dist_temp) - null)#
						#cat(mean(sim_dist))#
					}#
					if(est == "median"){#
						cat(paste("H0: median =", null, "\n"))#
						cat(paste("HA: median", sign, null, "\n"))#
						sim_dist = sim_dist_temp - (median(sim_dist_temp) - null)#
						#cat(median(sim_dist))#
					}					#
				}#
				if(data_type == "categorical"){#
					cat(paste("H0: p =", null, "\n"))#
					cat(paste("HA: p", sign, null, "\n"))#
					sim_dist = rbinom(nsim, n, prob = null) / n#
				}#
				smaller.tail = round(min(c(mean(sim_dist <= actual), mean(sim_dist >= actual))), 4)	#
				if(nsim > 500){#
					counts = hist(sim_dist, plot = FALSE)$counts  #
					hist(sim_dist, main = "Randomization distribution", xlab = "randomization statistic", ylim = c(0, 1.3 * max(counts)))  #
				}#
				if(nsim <= 500){#
					counts = table(sim_dist)#
					plot(sim_dist, type = "n", ylim = c(0,max(counts)), axes = FALSE, xlim = c(0.9*min(sim_dist),1.1*max(sim_dist)), main = "Randomization distribution", xlab = "randomization statistic", ylab = "")#
					axis(1)#
					axis(2)#
					for(i in 1:length(sim_dist)){#
						x   <- sim_dist[i]#
						rec <- sum(sim_dist == x)#
						points(rep(x, rec), 1:rec, pch=20, cex=0.8)					#
					}				#
				}#
			    alternative = match.arg(alternative)#
#
				if(alternative == "less"){#
					if(actual < null){cat(paste("p-value: ", smaller.tail,"\n"))}				#
					if(actual > null){cat(paste("p-value: ", 1 - smaller.tail,"\n"))}#
					if(drawlines == "yes"){lines(x = c(actual,actual), y = c(0,1.1*max(counts)), col="#225588", lwd=2)}#
				}#
				if(alternative == "greater"){#
					if(actual < null){cat(paste("p-value: ", 1 - smaller.tail,"\n"))}				#
					if(actual > null){cat(paste("p-value: ", smaller.tail,"\n"))}#
					if(drawlines == "yes"){lines(x = c(actual,actual), y = c(0,1.1*max(counts)), col="#225588", lwd=2)}#
				}#
				if(alternative == "twosided"){#
					cat(paste("p-value: ", smaller.tail * 2,"\n"))#
					lines(x = c(actual,actual), y = c(0,1.1*max(counts)), col="#225588", lwd=2)#
					if(actual >= null){#
						temp = actual - null#
						if(drawlines == "yes"){lines(x = c(null - temp,null - temp), y = c(0,1.1*max(counts)), col = "#225588", lwd=2)}						#
					}#
					if(actual < null){#
						temp = null - actual#
						if(drawlines == "yes"){lines(x = c(null + temp,null + temp), y = c(0,1.1*max(counts)), col = "#225588", lwd=2)}						#
					}		#
				}#
			  	if(drawlines == "yes"){text(x = actual, y = 1.2*max(counts), paste("observed\n", round(actual,4)), col = "#225588", cex = 0.8)}								#
			}		#
		}#
		# theoretical#
		if(method == "theoretical"){#
			# confidence interval#
			if(type == "ci"){#
				if(data_type == "quantitative"){#
					if(est == "median"){stop("Use simulation methods for inference for the median.")}#
					if(est == "mean"){#
						# check conditions#
						hist(data, main = "Histogram of sample data", xlab = "sample data")	#
						#cat("Check histogram to verify that sample data do not come from an extremely skewed distribution.\n")#
						# calculate me and se#
						se = sd(data) / sqrt(n)#
						cat(paste("Standard error =", round(se, 4), "\n"))#
						if(n >= 50) {critvalue = qnorm( (1 - conflevel)/2 + conflevel )}#
						if(n < 50) {critvalue = qt( (1 - conflevel)/2 + conflevel , df = n - 1)}					#
					}#
				}#
				if(data_type == "categorical"){#
					# check conditions#
					suc = round(n * actual, 2)#
					fail = round(n * (1 - actual), 2)#
					cat(paste("Number of successes =", round(suc), ";", "Number of failures =", round(fail)), "\n")	#
					if(suc < 10 | fail < 10){#
						stop("There aren't at least 10 successes and 10 failures, use simulation methods instead.")#
					}#
					# calculate me and se#
					se = sqrt(actual * (1-actual) / n)#
					cat(paste("Standard error =", round(se, 4), "\n"))#
					critvalue = qnorm( (1 - conflevel)/2 + conflevel )					#
				}#
				me = critvalue * se#
				ci = c(actual - me , actual + me)#
				cat(c(conflevel*100, "% Confidence interval = (", round(ci[1],2), ",", round(ci[2],2), ")\n"))	#
			}#
			# hypothesis test#
			if(type == "ht"){#
				if(data_type == "quantitative"){#
					if(est == "median"){stop("Use simulation methods for inference for the median.")}#
					if(est == "mean"){#
						# hypotheses#
						cat(paste("H0: mu =", null, "\n"))#
						cat(paste("HA: mu", sign, null, "\n"))#
						# check conditions#
						par(mfrow = c(1,2))#
						hist(data, main = "Histogram of sample data", xlab = "sample data")	#
						#cat("Check histogram to verify that sample data do not come from an extremely skewed distribution.\n")#
						# calculate test statistic and p-value component#
						se = sd(data) / sqrt(n)#
						cat("Standard error =", round(se,4), "\n")#
						teststat = (actual - null)/se#
						if(n >= 50){#
							cat(paste("Test statistic: Z = ", round(teststat, 3),"\n"))#
							smaller.tail = round(min(pnorm(teststat), pnorm(teststat, lower.tail = FALSE)), 4)#
							}#
						if(n < 50){#
							cat(paste("Test statistic: T = ", round(teststat, 3),"\n"))#
							cat(paste("Degrees of freedom: ", n - 1, "\n"))#
							smaller.tail = round(min(pt(teststat, df = n - 1), pt(teststat, df = n - 1, lower.tail = FALSE)), 4)#
							}		#
					}#
				}#
				if(data_type == "categorical"){#
					if(null < 0 | null > 1){#
						stop("Null value should be a proportion between 0 and 1.")#
					}#
					# hypotheses#
					cat(paste("H0: p =", null, "\n"))#
					cat(paste("HA: p", sign, null, "\n"))#
					# check conditions#
					exp_suc = round(n * null, 2)#
					exp_fail = round(n * (1 - null), 2)#
					cat(paste("Number of expected successes =", round(exp_suc), ";", "Number of expected failures =", round(exp_fail)), "\n")#
					if(exp_suc < 10 | exp_fail < 10){#
						stop("There aren't at least 10 expected successes and 10 expected failures, use simulation methods instead.")#
					}#
					# calculate test statistic and p-value#
					se = sqrt(null * (1 - null) / n)#
					cat("Standard error =", round(se,4), "\n")#
					teststat = (actual - null)/se#
					cat(paste("Test statistic: Z = ", round(teststat, 3),"\n"))#
					smaller.tail = round(min(pnorm(teststat), pnorm(teststat, lower.tail = FALSE)), 4)					#
				}#
#
				# alternative = less#
				if(alternative == "less"){#
					if(actual < null){cat(paste("p-value: ", smaller.tail,"\n"))}				#
					if(actual > null){cat(paste("p-value: ", 1 - smaller.tail,"\n"))}#
					normTail(L = teststat, axes = FALSE, col = "#22558833")#
					axis(1, at = c(-3, teststat, 0, 3), labels = c(NA, paste(round(actual,2)), paste(null), NA))#
				}#
#
				# alternative = greater#
				if(alternative == "greater"){#
					if(actual < null){cat(paste("p-value: ", 1 - smaller.tail,"\n"))}				#
					if(actual > null){cat(paste("p-value: ", smaller.tail,"\n"))}#
					normTail(U = teststat, axes = FALSE, col = "#22558833")#
					axis(1, at = c(-3, 0, teststat, 3), labels = c(NA, paste(null), paste(round(actual,2)), NA))#
				}#
				# alternative = twosided	#
				if(alternative == "twosided"){#
					cat(paste("p-value: ", smaller.tail * 2,"\n"))#
					if(actual < null){#
						normTail(L = teststat, U = -1*teststat, axes = FALSE, col = "#22558833")#
						axis(1, at = c(-3, teststat, 0, -1*teststat, 3), labels = c(NA, paste(round(actual,2)), paste(null), paste(round(null + (null - actual), 2)), NA))#
					}#
					if(actual > null){#
						normTail(L = -1*teststat, U = teststat, axes = FALSE, col = "#22558833")#
						axis(1, at = c(-3, -1*teststat, 0, teststat, 3), labels = c(NA, paste(round(null - (actual - null), 2)), paste(null), paste(round(actual,2)), NA))#
					}				#
				}#
				par(mfrow = c(1,1))#
			}#
		}#
	}	#
	# two variables#
	if(group_type == "categorical"){#
#
		# order#
		if(is.null(order)){order = levels(group)}#
		if(length(order) == 1 & !is.na(order[1])){#
			stop("`order' cannot be of length 1, list the order in which two levels of the grouping variable should be subtracted.")#
		}#
		if(length(order) == 2){#
			if( all(order %in% levels(group)) == FALSE){#
				str = paste(order[which(!(order %in% levels(group)))], collapse=" ")#
				stop(paste(str,"is not a level of the grouping variable.",sep = " "))#
			}#
			if((sum(levels(group) == order) == 0) == TRUE){#
				group = relevel(group, ref = levels(as.factor(group))[2])#
			}	#
			if((sum(levels(group) == order) == 0) == FALSE){#
				group = group#
			}		#
		}#
#
		# print what's going on#
		if(data_type == "quantitative"){#
			cat("One quantitative and one categorical variable\n")#
		}#
		if(data_type == "categorical"){#
			cat("Two categorical variables\n")#
		}#
		cat("Difference between two ", est, "s", "\n", sep = "")#
#
		# calculate sample sizes#
	  	n1 = sum(group==levels(as.factor(group))[1])#
	  	n2 = sum(group==levels(as.factor(group))[2])#
		# print sample sizes#
		n1_print = paste("n_", order[1], sep = "")		#
		n2_print = paste("n_", order[2], sep = "")		#
		cat(paste(n1_print, "=", n1, ";", n2_print, "=", n2, "\n"))#
#
		# set statistic: difference between means, medians, or proportions#
		if(data_type == "quantitative"){#
			statistic <- function(data, group){	#
				if(est == "mean"){#
					stat = mean(data[group == levels(as.factor(group))[1]]) - mean(data[group == levels(as.factor(group))[2]])					#
				}#
				if(est == "median"){#
					stat = median(data[group == levels(as.factor(group))[1]]) - median(data[group == levels(as.factor(group))[2]])										#
				}#
				return(stat)#
			}#
		}#
		if(data_type == "categorical"){#
			statistic <- function(data, group){	#
				sum(data == success & group == levels(as.factor(group))[1])/n1 - sum(data == success & group == levels(as.factor(group))[2])/n2 #
			}#
    	}#
#
		# calculate and print actual#
		actual = statistic(data, group)#
		cat("Observed difference between ", est, "s = ", round(actual,4), "\n", sep = "")#
#
		# save label#
		label = paste("Difference in sample ", est, "s", ", ", levels(as.factor(group))[1],"-",levels(as.factor(group))[2], sep = "")#
		# simulation#
		if(method == "simulation"){#
			n = length(data)#
			sim = matrix(NA, nrow = n, ncol = nsim)#
			# bootstrap ci#
			if(type == "ci"){#
				cat("Bootstrapping, please wait...", "\n")#
				if(data_type == "quantitative"){statistic = match.fun(est)}#
				if(data_type == "categorical"){#
					statistic = function(x){#
						which_success = which(levels(data) == success)#
						sum(x == which_success)/length(x)#
					}#
				}#
				sim1 = matrix(NA, nrow = n1, ncol = nsim)#
				sim2 = matrix(NA, nrow = n2, ncol = nsim)#
#
				for(i in 1:nsim){sim1[,i] = sample(data[group == order[1]], n1, replace = TRUE)}#
				for(i in 1:nsim){sim2[,i] = sample(data[group == order[2]], n2, replace = TRUE)}#
				sim_dist1 = apply(sim1, 2, statistic)#
				sim_dist2 = apply(sim2, 2, statistic)#
				sim_dist = sim_dist1 - sim_dist2#
				ci = quantile(sim_dist, c( (1 - conflevel)/2 , ((1 - conflevel)/2)+conflevel ))#
				counts = table(sim_dist)#
				if(nsim > 500){#
					counts = hist(sim_dist, plot = FALSE)$counts  #
					hist(sim_dist, main = "Bootstrap distribution", xlab = "bootstrap statistic")  #
				}#
				if(nsim <= 500){						#
						if(data_type == "quantitative"){#
							counts = BHH2::dotPlot(sim_dist, main = "Bootstrap distribution", xlab = "bootstrap statistic", pch = 20, cex = 0.8)$y							#
						}					#
						if(data_type == "categorical"){#
							counts = table(sim_dist)#
							plot(sim_dist, type = "n", ylim = c(0,max(counts)), axes = FALSE, xlim = c(0.9*min(sim_dist),1.1*max(sim_dist)), main = "Bootstrap distribution", xlab = "bootstrap statistic", ylab = "")#
							axis(1)#
							axis(2)#
							for(i in 1:length(sim_dist)){#
								x   <- sim_dist[i]#
								rec <- sum(sim_dist == x)#
								points(rep(x, rec), 1:rec, pch=20, cex=0.8)					#
							}							#
						} 					#
				}#
				for (i in 1:2) {#
			    	if(drawlines == "yes"){#
						segments(ci[i], 0, ci[i], 0.8 * max(counts), col="#225588", lwd=2)#
			    		text(round(ci[i],2), max(counts), pos=1, col="#225588", round(ci[i],2))#
					}#
			  	}#
#
				cat(c(conflevel*100, "% Bootstrap interval = (", round(ci[1],2), ",", round(ci[2],2), ")\n"))#
			}#
			# randomization test			#
			if(type == "ht"){#
				# hypotheses#
				if(est == "mean"){#
					mu1 = paste("mu_", order[1], sep = "")		#
					mu2 = paste("mu_", order[2], sep = "")		#
					cat(paste("H0:", mu1 , "-", mu2, "=", null, "\n"))#
					cat(paste("HA:", mu1 , "-", mu2, sign, null, "\n"))#
				}#
				if(est == "median"){#
					med1 = paste("median_", order[1], sep = "")		#
					med2 = paste("median_", order[2], sep = "")		#
					cat(paste("H0:", med1 , "-", med2, "=", null, "\n"))#
					cat(paste("HA:", med1 , "-", med2, sign, null, "\n"))#
				}#
				if(est == "proportion"){#
					p1 = paste("p_", order[1], sep = "")		#
					p2 = paste("p_", order[2], sep = "")		#
					cat(paste("H0:", p1 , "-", p2, "=", null, "\n"))#
					cat(paste("HA:", p1 , "-", p2, sign, null, "\n"))#
				}#
				cat("Randomizing, please wait...", "\n")#
				for(i in 1:nsim){sim[,i] = sample(group, n, replace = FALSE)}#
				sim_dist = apply(sim, 2, statistic, data = data)#
				smaller.tail = round(min(c(mean(sim_dist <= actual), mean(sim_dist >= actual))), 4)#
				xmin = min(c(-1.1*abs(actual), sim_dist))#
			  	xmax = max(c(1.1*actual, sim_dist))#
				if(nsim > 500){#
					counts = hist(sim_dist, plot = FALSE)$counts  #
					hist(sim_dist, main = "Randomization distribution", xlab = "randomization statistic", ylim = c(0, 1.3 * max(counts)), xlim = c(xmin,xmax))  #
				}#
				if(nsim <= 500){#
					if(data_type == "quantitative"){#
						counts = BHH2::dotPlot(sim_dist, main = "Randomization distribution", xlab = "randomization statistic", pch = 20, cex = 0.8, xlim = c(xmin,xmax))$y							#
					}					#
					if(data_type == "categorical"){#
						counts = table(sim_dist)#
						plot(sim_dist, type = "n", ylim = c(0,max(counts)), axes = FALSE, xlim = c(0.9*min(sim_dist),1.1*max(sim_dist)),  main = "Randomization distribution", xlab = "randomization statistic", ylab = "")#
						axis(1)#
						axis(2)#
						for(i in 1:length(sim_dist)){#
							x   <- sim_dist[i]#
							rec <- sum(sim_dist == x)#
							points(rep(x, rec), 1:rec, pch=20, cex=0.8)					#
						}							#
					}#
				}#
			    alternative = match.arg(alternative)#
#
				if(alternative == "less"){#
					if(actual < null){cat(paste("p-value: ", smaller.tail,"\n"))}				#
					if(actual > null){cat(paste("p-value: ", 1 - smaller.tail,"\n"))}#
					if(drawlines == "yes"){lines(x = c(actual,actual), y = c(0,1.1*max(counts)), col="#225588", lwd=2)}#
				}#
				if(alternative == "greater"){#
					if(actual < null){cat(paste("p-value: ", 1 - smaller.tail,"\n"))}				#
					if(actual > null){cat(paste("p-value: ", smaller.tail,"\n"))}#
					if(drawlines == "yes"){lines(x = c(actual,actual), y = c(0,1.1*max(counts)), col="#225588", lwd=2)}#
				}#
				if(alternative == "twosided"){#
					cat(paste("p-value: ", smaller.tail * 2,"\n"))#
					if(drawlines == "yes"){lines(x = c(actual,actual), y = c(0,1.1*max(counts)), col="#225588", lwd=2)}#
					if(actual >= null){#
						temp = actual - null#
						if(drawlines == "yes"){lines(x = c(null - temp,null - temp), y = c(0,1.1*max(counts)), col = "#225588", lwd=2)}						#
					}#
					if(actual < null){#
						temp = null - actual#
						if(drawlines == "yes"){lines(x = c(null + temp,null + temp), y = c(0,1.1*max(counts)), col = "#225588", lwd=2)}						#
					}		#
				}#
				if(drawlines == "yes"){text(x = actual, y = 1.25*max(counts), paste("observed\n", round(actual,4)), col = "#225588", cex = 0.8)}								#
			}#
#
		}#
		# theoretical#
		if(method == "theoretical"){#
			# confidence interval#
			if(type == "ci"){#
				if(data_type == "quantitative"){#
					if(est == "median"){stop("Use simulation methods for inference for the median.")#
					}#
					if(est == "mean"){#
						# check conditions#
						boxplot(data ~ group, main = "", xlab = "")#
						#cat("Check boxplot to verify that sample data do not come from extremely skewed distributions.\n")#
						# calculate se and critvalue#
						s1 = sd(data[group == levels(group)[1]])#
						s2 = sd(data[group == levels(group)[2]])#
						se = sqrt(s1^2/n1 + s2^2/n2)#
						cat("Standard error =", round(se,4), "\n")#
						if(n1 >= 50 & n2 >= 50){critvalue = qnorm( (1 - conflevel)/2 + conflevel )}#
						if(n1 < 50 | n2 < 50) {critvalue = qt( (1 - conflevel)/2 + conflevel , df = min(n1 - 1, n2 - 1))}						#
					}#
				}#
				if(data_type == "categorical"){#
					# check conditions#
					suc1 = sum(data[group == levels(group)[1]] == success)#
					fail1 = sum(data[group == levels(group)[1]] != success)#
					cat(paste("Group 1: Number of successes =", round(suc1), ";", "Number of failures =", round(fail1)), "\n")	#
					suc2 = sum(data[group == levels(group)[2]] == success)#
					fail2 = sum(data[group == levels(group)[2]] != success)#
					cat(paste("Group 2: Number of successes =", round(suc2), ";", "Number of failures =", round(fail2)), "\n")#
					if(suc1 < 10 | fail1 < 10 | suc2 < 10 | fail2 < 10){#
						stop("There aren't at least 10 successes and 10 failures, use simulation methods instead.")#
					}#
					# calculate se and critvalue#
					p1 = suc1 / n1#
					p2 = suc2 / n2#
					se = sqrt(p1 * (1-p1)/n1 + p2 * (1-p2)/n2)#
					cat("Standard error =", round(se,4), "\n")#
					critvalue = qnorm( (1 - conflevel)/2 + conflevel )					#
				}#
				# calculate ci#
				me = critvalue * se#
				ci = c(actual - me , actual + me)#
				cat(c(conflevel*100, "% Confidence interval = (", round(ci[1],2), ",", round(ci[2],2), ")\n"))#
			}#
			# hypothesis test#
			if(type == "ht"){#
				if(data_type == "quantitative"){#
					if(est == "median"){stop("Use simulation methods for inference for the median.")#
					}#
					if(est == "mean"){#
						# hypotheses#
						mu1 = paste("mu_", order[1], sep = "")		#
						mu2 = paste("mu_", order[2], sep = "")		#
						cat(paste("H0:", mu1 , "-", mu2, "=", null, "\n"))#
						cat(paste("HA:", mu1 , "-", mu2, sign, null, "\n"))#
						# check conditions#
						par(mfrow = c(1,2))#
						boxplot(data ~ group, main = "", xlab = "")#
						#cat("Check boxplot to verify that sample data do not come from extremely skewed distributions.\n")#
						# calculate test statistic and p-value component#
						s1 = sd(data[group == levels(group)[1]])#
						s2 = sd(data[group == levels(group)[2]])#
						se = sqrt(s1^2/n1 + s2^2/n2)#
						cat("Standard error =", round(se,3), "\n")#
						teststat = (actual - null)/se#
						if(n1 >= 50 & n2 >= 50){#
							cat(paste("Test statistic: Z = ", round(teststat, 3),"\n"))#
							smaller.tail = round(min(pnorm(teststat), pnorm(teststat, lower.tail = FALSE)), 4)#
							}#
						if(n1 < 50 | n2 < 50) {#
							cat(paste("Test statistic: T = ", round(teststat, 3),"\n"))#
							cat(paste("Degrees of freedom: ", min(n1 - 1, n2 - 1), "\n"))#
							smaller.tail = round(min(pt(teststat, df = min(n1 - 1, n2 - 1)), pt(teststat, df = min(n1 - 1, n2 - 1), lower.tail = FALSE)), 4)#
							}						#
					}	#
				}#
				if(data_type == "categorical"){#
					if(null <= -1 | null >= 1){#
						stop("Null value should be a proportion between 0 and 1.")#
					}#
					# hypotheses#
					p1 = paste("p_", order[1], sep = "")		#
					p2 = paste("p_", order[2], sep = "")		#
					cat(paste("H0:", p1 , "-", p2, "=", null, "\n"))#
					cat(paste("HA:", p1 , "-", p2, sign, null, "\n"))#
#
					# calculate p_pool#
					suc1 = sum(data[group == levels(group)[1]] == success)#
					fail1 = sum(data[group == levels(group)[1]] != success)#
					suc2 = sum(data[group == levels(group)[2]] == success)#
					fail2 = sum(data[group == levels(group)[2]] != success)#
					p_pool =  (suc1 + suc2)/(n1 + n2)#
					cat(paste("Pooled proportion =", round(p_pool, 4), "\n"))	#
					# check conditions#
					exp_suc1 = n1 * p_pool#
					exp_fail1 = n1 * (1 - p_pool)#
					cat(paste("Group 1: Number of expected successes =", round(exp_suc1), ";", "Number of expected failures =", round(exp_fail1)), "\n")#
					exp_suc2 = n2 * p_pool#
					exp_fail2 = n2 * (1 - p_pool)#
					cat(paste("Group 2: Number of expected successes =", round(exp_suc2), ";", "Number of expected failures =", round(exp_fail2)), "\n")#
					if(exp_suc1 < 10 | exp_fail1 < 10 | exp_suc2 < 10 | exp_fail2 < 10){#
						stop("There aren't at least 10 expected successes and 10 expected failures, use simulation methods instead.")#
					}#
					# calculate test statistic and p-value#
					se = sqrt( p_pool * (1 - p_pool) / n1 + p_pool * (1 - p_pool) / n2 )#
					cat("Standard error =", round(se,3), "\n")#
					teststat = (actual - null) / se#
					cat(paste("Test statistic: Z = ", round(teststat, 3),"\n"))#
					smaller.tail = round(min(pnorm(teststat), pnorm(teststat, lower.tail = FALSE)), 4)								#
				}#
				# alternative = less#
				if(alternative == "less"){#
					if(actual < null){cat(paste("p-value: ", smaller.tail,"\n"))}				#
					if(actual > null){cat(paste("p-value: ", 1 - smaller.tail,"\n"))}#
					normTail(L = teststat, axes = FALSE, col = "#22558833")#
					axis(1, at = c(-3, teststat, 0, 3), labels = c(NA, paste(round(actual,2)), paste(null), NA))#
				}#
				# alternative = greater#
				if(alternative == "greater"){#
					if(actual < null){cat(paste("p-value: ", 1 - smaller.tail,"\n"))}				#
					if(actual > null){cat(paste("p-value: ", smaller.tail,"\n"))}#
					normTail(U = teststat, axes = FALSE, col = "#22558833")#
					axis(1, at = c(-3, 0, teststat, 3), labels = c(NA, paste(null), paste(round(actual,2)), NA))#
				}				#
				# alternative = twosided	#
				if(alternative == "twosided"){#
					cat(paste("p-value: ", smaller.tail * 2,"\n"))#
					if(actual < null){#
						normTail(L = teststat, U = -1*teststat, axes = FALSE, col = "#22558833")#
						axis(1, at = c(-3, teststat, 0, -1*teststat, 3), labels = c(NA, paste(round(actual,2)), paste(null), paste(round(null + (null - actual), 2)), NA))#
					}#
					if(actual > null){#
						normTail(L = -1*teststat, U = teststat, axes = FALSE, col = "#22558833")#
						axis(1, at = c(-3, -1*teststat, 0, teststat, 3), labels = c(NA, paste(round(null - (actual - null), 2)), paste(null), paste(round(actual,2)), NA))#
					}				#
				}#
				par(mfrow = c(1,1))#
#
			}#
		}#
	}#
	if(simdist == TRUE){return(sim_dist)}#
}
inference(data = nc$weight, group = nc$habit, est = "mean", type = "ht", null = 0, alternative = "twosided", method = "theoretical")
setwd("~/Dropbox/OI Labs/lab5/v2 - knitr/data & code")
save(list=c("nc","inference"), file = "nc.RData")
rm(list=ls())
load("/Users/mine/Dropbox/OI Labs/lab5/v2 - knitr/data & code/nc.RData")
ls()
inference(data = nc$weight, group = nc$habit, est = "mean", type = "ht", null = 0, alternative = "twosided", method = "theoretical")
inference(data = nc$weight, group = nc$habit, est = "mean", type = "ci", null = 0, alternative = "twosided", method = "theoretical")
inference(data = nc$weight, group = nc$habit, est = "mean", type = "ci", null = 0, alternative = "twosided", method = "theoretical", order = c("smoker","nonsmoker"))
names(nc)
inference(data = nc$weight, group = nc$habit, est = "mean", type = "ci", null = 0, alternative = "twosided", method = "theoretical", order = c("smoker","nonsmoker"), conflevel = 0.90)
inference(data = nc$gained, group = nc$mature, est = "mean", type = "ci", null = 0, alternative = "twosided", method = "theoretical", order = c("mature","younger"))
table(nc$mature)
inference(data = nc$gained, group = nc$mature, est = "mean", type = "ci", null = 0, alternative = "twosided", method = "theoretical", order = c("mature mom","younger mom"))
summary(nc)
by(nc$weight, nc$habit, mean)
￼inference(data = nc$weight, group = nc$habit, est = "mean", type = "ht", null = 0,    alternative = "twosided", method = "theoretical")
￼inference(data = nc$weight, group = nc$habit, est = "mean", type = "ht", null = 0, alternative = "twosided", method = "theoretical")
￼inference(data = nc$weight, group = nc$habit, est = "mean", type = "ht", null = 0, alternative = "twosided", method = "theoretical")
￼inference(data = nc$weight, group = nc$habit, est = "mean", type = "ht", null = 0,alternative = "twosided", method = "theoretical")
inference(data = nc$weight, group = nc$habit, est = "mean", type = "ht", null = 0,alternative = "twosided", method = "theoretical")
inference(data = nc$weight, group = nc$habit, est = "mean", type = "ci", null = 0,    alternative = "twosided", method = "theoretical", order = c("smoker", "nonsmoker"))
rm(list=ls())
inference#
inference <- function(data, group = NULL, est = c("mean", "median", "proportion"), success = NULL, order = NULL, nsim = 10000, conflevel = 0.95, null = NULL, alternative = c("less","greater","twosided"), type = c("ci","ht"), method = c("theoretical","simulation"), drawlines = "yes", simdist = FALSE){#
	# data: variable 1, can be quantitative or categorical#
	# group: variable 2, categorical (optional)#
	# est: parameter to estimate, mean, median, or mode#
	# success: which level of the categorical variable to call "success", i.e. do inference on#
	# order: when group is given, order of groups in which to subtract parameters#
	# nsim: number of simulations#
	# level: confidence level, value between 0 and 1#
	# load openintro package#
	if(!("openintro" %in% names(installed.packages()[,"Package"]))){install.packages("openintro")}#
	if(!("BHH2" %in% names(installed.packages()[,"Package"]))){install.packages("BHH2")}#
	library(openintro)#
	library(BHH2)#
	# possible error: weird data#
	if(length(data) == 1){stop("Sample size is only 1, check input data.")}#
	# possible error: missing arguments#
	if(length(est) > 1){stop("Missing estimate: mean, median, or proportion")}#
	if(length(type) > 1){stop("Missing type: confidence interval or hypothesis test")}#
	if(length(method) > 1){stop("Missing method: theoretical or simulation")}#
	if(type == "ht" & is.null(null)){stop("Missing null value")}#
	if(type == "ht" & length(alternative) > 1){stop("Missing alternative: less, greater, or twosided")}#
	# possible error: method isn't theoretical or simulation#
	if(method %in% c("theoretical", "simulation") == FALSE){#
		stop("Method should be theoretical or simulation, check spelling and spaces.")#
	}#
	# possible error: type isn't ci or ht#
	if(type %in% c("ci", "ht") == FALSE){#
		stop("Type should be ci or ht, check spelling and spaces.")#
	}#
	# possible error: estimate isn't mean, median, or proportion#
	if(est %in% c("mean", "median", "proportion") == FALSE){#
		stop("Estimate should be mean, median, or proportion, check spelling and spaces.")#
	}#
	# possible error: variables not of same length#
	if (!is.null(group)){#
		if (length(data) != length(group)) {stop("The two variables must be of same length.")}#
	}#
	# possible error: confidence level greater than 1#
	if(conflevel > 1){conflevel = conflevel / 100}#
	# possible error: drop NAs, and if group is given, use pairwise complete#
	if (is.null(group)) {#
    	if (sum(is.na(data)) > 0) {data = data[!is.na(data)]}#
  	}#
	if (!is.null(group)) {#
    	if (sum(is.na(data)) > 0 | sum(is.na(group)) > 0) {#
      		data.temp = data[!is.na(data) & !is.na(group)]#
      		group.temp = group[!is.na(data) & !is.na(group)]#
      		data = data.temp#
      		group = group.temp#
    	}#
  	}#
#
	# if data or group is character, make factor#
	if(is.character(data)){data = as.factor(data)}#
	if(is.character(group)){group = as.factor(group)}#
#
	# set variable type for data#
	data_type = "categorical"#
  	if (is.numeric(data)) {data_type = "quantitative"}#
	# print variable types#
	if (!is.null(group)) {#
    	group_type = "categorical"#
    	if(is.numeric(group)){#
			group_type = "quantitative"#
    		cat(paste("Variable 1:", data_type, ", Variable 2:", group_type, "\n"))#
			}#
  	}#
	if (is.null(group)) {#
    	group_type = "only1var"#
    	cat(paste("One", data_type, "variable", "\n"))#
  	}#
#
	# the quantitative variable should be data if one categorical and one quantitative#
  	if (data_type == "categorical" & group_type == "quantitative") {#
    	data.temp = group#
    	group.temp = data#
    	data = data.temp#
    	group = group.temp#
    	data_type = "quantitative"#
    	group_type = "categorical"#
  	}#
#
	# possible error: wrong estimate#
	if(data_type == "quantitative" & est == "proportion"){#
		stop("Variable is quantitative, sample statistic cannot be a proportion, choose either mean or median")#
	}	#
	if(data_type == "categorical" & est == "mean"){#
		stop("Variable is categorical, sample statistic cannot be a mean or a median, use proportion")#
	}#
	if(data_type == "categorical" & est == "median"){#
		stop("Variable is categorical, sample statistic cannot be a mean or a median, use proportion")#
	}#
	# possible error: group variable has more than two levels#
	if(group_type == "categorical" & length(levels(group)) > 2){#
		stop("Grouping variable (group) can only have 2 levels.")#
	} #
	# possible errors about success#
	if(data_type == "categorical"){#
		# success not provided for categorical variable#
		if(is.null(success)){#
			stop("Variable is categorical, specify which level to call success.")#
		}#
		# possible error: success provided is not a level of the categorical variable#
		if(success %in% levels(data) == FALSE){#
			stop(paste(success,"is not a level of the success variable."))#
		}#
	}#
#
	# possible warning: success provided for quantitative variable#
	if(data_type == "quantitative" & !is.null(success)){#
		warning("`success' is ignored for quantitative variable.\n")#
	}#
	# define sample size#
	n = length(data)#
	# define sign of hypothesis test#
	if(type == "ht"){#
		if(alternative == "less"){sign = "<"}#
		if(alternative == "greater"){sign = ">"}#
		if(alternative == "twosided"){sign = "!="}		#
	}#
#
	# one variable#
	if(group_type == "only1var"){#
		cat("Single", est, "\n")#
		# set statistic: mean, median, or proportion#
		if(data_type == "quantitative"){statistic = match.fun(est)}#
		if(data_type == "categorical"){statistic = function(x){sum(x == success)/length(x)}}#
		actual = statistic(data)#
		cat(paste("Observed", est, "=", round(actual, 4)), "\n")#
		# simulation#
		if(method == "simulation"){#
			sim = matrix(NA, nrow = n, ncol = nsim)#
			# bootstrap ci#
			if(type == "ci"){#
				cat("Bootstrapping, please wait...", "\n")#
				for(i in 1:nsim){sim[,i] = sample(data, n, replace = TRUE)}#
				if(data_type == "categorical"){#
					statistic = function(x){#
						which_success = which(levels(data) == success)#
						sum(x == which_success)/length(x)#
						}#
					}				#
				sim_dist = apply(sim, 2, statistic)#
#
				ci = quantile(sim_dist, c( (1 - conflevel)/2 , ((1 - conflevel)/2)+conflevel ))#
				if(nsim > 500){#
					counts = hist(sim_dist, plot = FALSE)$counts#
					hist(sim_dist, main = "Bootstrap distribution", xlab = "bootstrap statistic")  #
				}#
				if(nsim <= 500){#
					counts = table(sim_dist)#
					plot(sim_dist, type = "n", ylim = c(0,max(counts)), axes = FALSE, xlim = c(0.9*min(sim_dist),1.1*max(sim_dist)), main = "Bootstrap distribution", xlab = "bootstrap statistic", ylab = "")#
					axis(1)#
					axis(2)#
					for(i in 1:length(sim_dist)){#
						x   <- sim_dist[i]#
						rec <- sum(sim_dist == x)#
						points(rep(x, rec), 1:rec, pch=20, cex=0.8)#
					}#
				}#
				for (i in 1:2) {#
			    	if(drawlines == "yes"){#
						segments(ci[i], 0, ci[i], 0.8 * max(counts), col="#225588", lwd=2)#
			    		text(round(ci[i],2), max(counts), pos=1, col="#225588", round(ci[i],2))#
					}#
			  	}#
#
				cat(c(conflevel*100, "% Bootstrap interval = (", round(ci[1],2), ",", round(ci[2],2), ")\n"))		#
			}#
			# randomization test#
			if(type == "ht"){#
				cat("Randomizing, please wait...", "\n")#
				if(data_type == "quantitative"){#
					for(i in 1:nsim){sim[,i] = sample(data, n, replace = TRUE)}#
					sim_dist_temp = apply(sim, 2, statistic)#
					if(est == "mean"){#
						# hypotheses#
						cat(paste("H0: mu =", null, "\n"))#
						cat(paste("HA: mu", sign, null, "\n"))#
						sim_dist = sim_dist_temp - (mean(sim_dist_temp) - null)#
						#cat(mean(sim_dist))#
					}#
					if(est == "median"){#
						cat(paste("H0: median =", null, "\n"))#
						cat(paste("HA: median", sign, null, "\n"))#
						sim_dist = sim_dist_temp - (median(sim_dist_temp) - null)#
						#cat(median(sim_dist))#
					}					#
				}#
				if(data_type == "categorical"){#
					cat(paste("H0: p =", null, "\n"))#
					cat(paste("HA: p", sign, null, "\n"))#
					sim_dist = rbinom(nsim, n, prob = null) / n#
				}#
				smaller.tail = round(min(c(mean(sim_dist <= actual), mean(sim_dist >= actual))), 4)	#
				if(nsim > 500){#
					counts = hist(sim_dist, plot = FALSE)$counts  #
					hist(sim_dist, main = "Randomization distribution", xlab = "randomization statistic", ylim = c(0, 1.3 * max(counts)))  #
				}#
				if(nsim <= 500){#
					counts = table(sim_dist)#
					plot(sim_dist, type = "n", ylim = c(0,max(counts)), axes = FALSE, xlim = c(0.9*min(sim_dist),1.1*max(sim_dist)), main = "Randomization distribution", xlab = "randomization statistic", ylab = "")#
					axis(1)#
					axis(2)#
					for(i in 1:length(sim_dist)){#
						x   <- sim_dist[i]#
						rec <- sum(sim_dist == x)#
						points(rep(x, rec), 1:rec, pch=20, cex=0.8)					#
					}				#
				}#
			    alternative = match.arg(alternative)#
#
				if(alternative == "less"){#
					if(actual < null){cat(paste("p-value: ", smaller.tail,"\n"))}				#
					if(actual > null){cat(paste("p-value: ", 1 - smaller.tail,"\n"))}#
					if(drawlines == "yes"){lines(x = c(actual,actual), y = c(0,1.1*max(counts)), col="#225588", lwd=2)}#
				}#
				if(alternative == "greater"){#
					if(actual < null){cat(paste("p-value: ", 1 - smaller.tail,"\n"))}				#
					if(actual > null){cat(paste("p-value: ", smaller.tail,"\n"))}#
					if(drawlines == "yes"){lines(x = c(actual,actual), y = c(0,1.1*max(counts)), col="#225588", lwd=2)}#
				}#
				if(alternative == "twosided"){#
					cat(paste("p-value: ", smaller.tail * 2,"\n"))#
					lines(x = c(actual,actual), y = c(0,1.1*max(counts)), col="#225588", lwd=2)#
					if(actual >= null){#
						temp = actual - null#
						if(drawlines == "yes"){lines(x = c(null - temp,null - temp), y = c(0,1.1*max(counts)), col = "#225588", lwd=2)}						#
					}#
					if(actual < null){#
						temp = null - actual#
						if(drawlines == "yes"){lines(x = c(null + temp,null + temp), y = c(0,1.1*max(counts)), col = "#225588", lwd=2)}						#
					}		#
				}#
			  	if(drawlines == "yes"){text(x = actual, y = 1.2*max(counts), paste("observed\n", round(actual,4)), col = "#225588", cex = 0.8)}								#
			}		#
		}#
		# theoretical#
		if(method == "theoretical"){#
			# confidence interval#
			if(type == "ci"){#
				if(data_type == "quantitative"){#
					if(est == "median"){stop("Use simulation methods for inference for the median.")}#
					if(est == "mean"){#
						# check conditions#
						hist(data, main = "Histogram of sample data", xlab = "sample data")	#
						#cat("Check histogram to verify that sample data do not come from an extremely skewed distribution.\n")#
						# calculate me and se#
						se = sd(data) / sqrt(n)#
						cat(paste("Standard error =", round(se, 4), "\n"))#
						if(n >= 50) {critvalue = qnorm( (1 - conflevel)/2 + conflevel )}#
						if(n < 50) {critvalue = qt( (1 - conflevel)/2 + conflevel , df = n - 1)}					#
					}#
				}#
				if(data_type == "categorical"){#
					# check conditions#
					suc = round(n * actual, 2)#
					fail = round(n * (1 - actual), 2)#
					cat(paste("Number of successes =", round(suc), ";", "Number of failures =", round(fail)), "\n")	#
					if(suc < 10 | fail < 10){#
						stop("There aren't at least 10 successes and 10 failures, use simulation methods instead.")#
					}#
					# calculate me and se#
					se = sqrt(actual * (1-actual) / n)#
					cat(paste("Standard error =", round(se, 4), "\n"))#
					critvalue = qnorm( (1 - conflevel)/2 + conflevel )					#
				}#
				me = critvalue * se#
				ci = c(actual - me , actual + me)#
				cat(c(conflevel*100, "% Confidence interval = (", round(ci[1],2), ",", round(ci[2],2), ")\n"))	#
			}#
			# hypothesis test#
			if(type == "ht"){#
				if(data_type == "quantitative"){#
					if(est == "median"){stop("Use simulation methods for inference for the median.")}#
					if(est == "mean"){#
						# hypotheses#
						cat(paste("H0: mu =", null, "\n"))#
						cat(paste("HA: mu", sign, null, "\n"))#
						# check conditions#
						par(mfrow = c(1,2))#
						hist(data, main = "Histogram of sample data", xlab = "sample data")	#
						#cat("Check histogram to verify that sample data do not come from an extremely skewed distribution.\n")#
						# calculate test statistic and p-value component#
						se = sd(data) / sqrt(n)#
						cat("Standard error =", round(se,4), "\n")#
						teststat = (actual - null)/se#
						if(n >= 50){#
							cat(paste("Test statistic: Z = ", round(teststat, 3),"\n"))#
							smaller.tail = round(min(pnorm(teststat), pnorm(teststat, lower.tail = FALSE)), 4)#
							}#
						if(n < 50){#
							cat(paste("Test statistic: T = ", round(teststat, 3),"\n"))#
							cat(paste("Degrees of freedom: ", n - 1, "\n"))#
							smaller.tail = round(min(pt(teststat, df = n - 1), pt(teststat, df = n - 1, lower.tail = FALSE)), 4)#
							}		#
					}#
				}#
				if(data_type == "categorical"){#
					if(null < 0 | null > 1){#
						stop("Null value should be a proportion between 0 and 1.")#
					}#
					# hypotheses#
					cat(paste("H0: p =", null, "\n"))#
					cat(paste("HA: p", sign, null, "\n"))#
					# check conditions#
					exp_suc = round(n * null, 2)#
					exp_fail = round(n * (1 - null), 2)#
					cat(paste("Number of expected successes =", round(exp_suc), ";", "Number of expected failures =", round(exp_fail)), "\n")#
					if(exp_suc < 10 | exp_fail < 10){#
						stop("There aren't at least 10 expected successes and 10 expected failures, use simulation methods instead.")#
					}#
					# calculate test statistic and p-value#
					se = sqrt(null * (1 - null) / n)#
					cat("Standard error =", round(se,4), "\n")#
					teststat = (actual - null)/se#
					cat(paste("Test statistic: Z = ", round(teststat, 3),"\n"))#
					smaller.tail = round(min(pnorm(teststat), pnorm(teststat, lower.tail = FALSE)), 4)					#
				}#
#
				# alternative = less#
				if(alternative == "less"){#
					if(actual < null){cat(paste("p-value: ", smaller.tail,"\n"))}				#
					if(actual > null){cat(paste("p-value: ", 1 - smaller.tail,"\n"))}#
					normTail(L = teststat, axes = FALSE, col = "#22558833")#
					axis(1, at = c(-3, teststat, 0, 3), labels = c(NA, paste(round(actual,2)), paste(null), NA))#
				}#
#
				# alternative = greater#
				if(alternative == "greater"){#
					if(actual < null){cat(paste("p-value: ", 1 - smaller.tail,"\n"))}				#
					if(actual > null){cat(paste("p-value: ", smaller.tail,"\n"))}#
					normTail(U = teststat, axes = FALSE, col = "#22558833")#
					axis(1, at = c(-3, 0, teststat, 3), labels = c(NA, paste(null), paste(round(actual,2)), NA))#
				}#
				# alternative = twosided	#
				if(alternative == "twosided"){#
					cat(paste("p-value: ", smaller.tail * 2,"\n"))#
					if(actual < null){#
						normTail(L = teststat, U = -1*teststat, axes = FALSE, col = "#22558833")#
						axis(1, at = c(-3, teststat, 0, -1*teststat, 3), labels = c(NA, paste(round(actual,2)), paste(null), paste(round(null + (null - actual), 2)), NA))#
					}#
					if(actual > null){#
						normTail(L = -1*teststat, U = teststat, axes = FALSE, col = "#22558833")#
						axis(1, at = c(-3, -1*teststat, 0, teststat, 3), labels = c(NA, paste(round(null - (actual - null), 2)), paste(null), paste(round(actual,2)), NA))#
					}				#
				}#
				par(mfrow = c(1,1))#
			}#
		}#
	}	#
	# two variables#
	if(group_type == "categorical"){#
#
		# order#
		if(is.null(order)){order = levels(group)}#
		if(length(order) == 1 & !is.na(order[1])){#
			stop("`order' cannot be of length 1, list the order in which two levels of the grouping variable should be subtracted.")#
		}#
		if(length(order) == 2){#
			if( all(order %in% levels(group)) == FALSE){#
				str = paste(order[which(!(order %in% levels(group)))], collapse=" ")#
				stop(paste(str,"is not a level of the grouping variable.",sep = " "))#
			}#
			if((sum(levels(group) == order) == 0) == TRUE){#
				group = relevel(group, ref = levels(as.factor(group))[2])#
			}	#
			if((sum(levels(group) == order) == 0) == FALSE){#
				group = group#
			}		#
		}#
#
		# print what's going on#
		if(data_type == "quantitative"){#
			cat("One quantitative and one categorical variable\n")#
		}#
		if(data_type == "categorical"){#
			cat("Two categorical variables\n")#
		}#
		cat("Difference between two ", est, "s", "\n", sep = "")#
#
		# calculate sample sizes#
	  	n1 = sum(group==levels(as.factor(group))[1])#
	  	n2 = sum(group==levels(as.factor(group))[2])#
		# print sample sizes#
		n1_print = paste("n_", order[1], sep = "")		#
		n2_print = paste("n_", order[2], sep = "")		#
		cat(paste(n1_print, "=", n1, ";", n2_print, "=", n2, "\n"))#
#
		# set statistic: difference between means, medians, or proportions#
		if(data_type == "quantitative"){#
			statistic <- function(data, group){	#
				if(est == "mean"){#
					stat = mean(data[group == levels(as.factor(group))[1]]) - mean(data[group == levels(as.factor(group))[2]])					#
				}#
				if(est == "median"){#
					stat = median(data[group == levels(as.factor(group))[1]]) - median(data[group == levels(as.factor(group))[2]])										#
				}#
				return(stat)#
			}#
		}#
		if(data_type == "categorical"){#
			statistic <- function(data, group){	#
				sum(data == success & group == levels(as.factor(group))[1])/n1 - sum(data == success & group == levels(as.factor(group))[2])/n2 #
			}#
    	}#
#
		# calculate and print actual#
		actual = statistic(data, group)#
		cat("Observed difference between ", est, "s = ", round(actual,4), "\n", sep = "")#
#
		# save label#
		label = paste("Difference in sample ", est, "s", ", ", levels(as.factor(group))[1],"-",levels(as.factor(group))[2], sep = "")#
		# simulation#
		if(method == "simulation"){#
			n = length(data)#
			sim = matrix(NA, nrow = n, ncol = nsim)#
			# bootstrap ci#
			if(type == "ci"){#
				cat("Bootstrapping, please wait...", "\n")#
				if(data_type == "quantitative"){statistic = match.fun(est)}#
				if(data_type == "categorical"){#
					statistic = function(x){#
						which_success = which(levels(data) == success)#
						sum(x == which_success)/length(x)#
					}#
				}#
				sim1 = matrix(NA, nrow = n1, ncol = nsim)#
				sim2 = matrix(NA, nrow = n2, ncol = nsim)#
#
				for(i in 1:nsim){sim1[,i] = sample(data[group == order[1]], n1, replace = TRUE)}#
				for(i in 1:nsim){sim2[,i] = sample(data[group == order[2]], n2, replace = TRUE)}#
				sim_dist1 = apply(sim1, 2, statistic)#
				sim_dist2 = apply(sim2, 2, statistic)#
				sim_dist = sim_dist1 - sim_dist2#
				ci = quantile(sim_dist, c( (1 - conflevel)/2 , ((1 - conflevel)/2)+conflevel ))#
				counts = table(sim_dist)#
				if(nsim > 500){#
					counts = hist(sim_dist, plot = FALSE)$counts  #
					hist(sim_dist, main = "Bootstrap distribution", xlab = "bootstrap statistic")  #
				}#
				if(nsim <= 500){						#
						if(data_type == "quantitative"){#
							counts = BHH2::dotPlot(sim_dist, main = "Bootstrap distribution", xlab = "bootstrap statistic", pch = 20, cex = 0.8)$y							#
						}					#
						if(data_type == "categorical"){#
							counts = table(sim_dist)#
							plot(sim_dist, type = "n", ylim = c(0,max(counts)), axes = FALSE, xlim = c(0.9*min(sim_dist),1.1*max(sim_dist)), main = "Bootstrap distribution", xlab = "bootstrap statistic", ylab = "")#
							axis(1)#
							axis(2)#
							for(i in 1:length(sim_dist)){#
								x   <- sim_dist[i]#
								rec <- sum(sim_dist == x)#
								points(rep(x, rec), 1:rec, pch=20, cex=0.8)					#
							}							#
						} 					#
				}#
				for (i in 1:2) {#
			    	if(drawlines == "yes"){#
						segments(ci[i], 0, ci[i], 0.8 * max(counts), col="#225588", lwd=2)#
			    		text(round(ci[i],2), max(counts), pos=1, col="#225588", round(ci[i],2))#
					}#
			  	}#
#
				cat(c(conflevel*100, "% Bootstrap interval = (", round(ci[1],2), ",", round(ci[2],2), ")\n"))#
			}#
			# randomization test			#
			if(type == "ht"){#
				# hypotheses#
				if(est == "mean"){#
					mu1 = paste("mu_", order[1], sep = "")		#
					mu2 = paste("mu_", order[2], sep = "")		#
					cat(paste("H0:", mu1 , "-", mu2, "=", null, "\n"))#
					cat(paste("HA:", mu1 , "-", mu2, sign, null, "\n"))#
				}#
				if(est == "median"){#
					med1 = paste("median_", order[1], sep = "")		#
					med2 = paste("median_", order[2], sep = "")		#
					cat(paste("H0:", med1 , "-", med2, "=", null, "\n"))#
					cat(paste("HA:", med1 , "-", med2, sign, null, "\n"))#
				}#
				if(est == "proportion"){#
					p1 = paste("p_", order[1], sep = "")		#
					p2 = paste("p_", order[2], sep = "")		#
					cat(paste("H0:", p1 , "-", p2, "=", null, "\n"))#
					cat(paste("HA:", p1 , "-", p2, sign, null, "\n"))#
				}#
				cat("Randomizing, please wait...", "\n")#
				for(i in 1:nsim){sim[,i] = sample(group, n, replace = FALSE)}#
				sim_dist = apply(sim, 2, statistic, data = data)#
				smaller.tail = round(min(c(mean(sim_dist <= actual), mean(sim_dist >= actual))), 4)#
				xmin = min(c(-1.1*abs(actual), sim_dist))#
			  	xmax = max(c(1.1*actual, sim_dist))#
				if(nsim > 500){#
					counts = hist(sim_dist, plot = FALSE)$counts  #
					hist(sim_dist, main = "Randomization distribution", xlab = "randomization statistic", ylim = c(0, 1.3 * max(counts)), xlim = c(xmin,xmax))  #
				}#
				if(nsim <= 500){#
					if(data_type == "quantitative"){#
						counts = BHH2::dotPlot(sim_dist, main = "Randomization distribution", xlab = "randomization statistic", pch = 20, cex = 0.8, xlim = c(xmin,xmax))$y							#
					}					#
					if(data_type == "categorical"){#
						counts = table(sim_dist)#
						plot(sim_dist, type = "n", ylim = c(0,max(counts)), axes = FALSE, xlim = c(0.9*min(sim_dist),1.1*max(sim_dist)),  main = "Randomization distribution", xlab = "randomization statistic", ylab = "")#
						axis(1)#
						axis(2)#
						for(i in 1:length(sim_dist)){#
							x   <- sim_dist[i]#
							rec <- sum(sim_dist == x)#
							points(rep(x, rec), 1:rec, pch=20, cex=0.8)					#
						}							#
					}#
				}#
			    alternative = match.arg(alternative)#
#
				if(alternative == "less"){#
					if(actual < null){cat(paste("p-value: ", smaller.tail,"\n"))}				#
					if(actual > null){cat(paste("p-value: ", 1 - smaller.tail,"\n"))}#
					if(drawlines == "yes"){lines(x = c(actual,actual), y = c(0,1.1*max(counts)), col="#225588", lwd=2)}#
				}#
				if(alternative == "greater"){#
					if(actual < null){cat(paste("p-value: ", 1 - smaller.tail,"\n"))}				#
					if(actual > null){cat(paste("p-value: ", smaller.tail,"\n"))}#
					if(drawlines == "yes"){lines(x = c(actual,actual), y = c(0,1.1*max(counts)), col="#225588", lwd=2)}#
				}#
				if(alternative == "twosided"){#
					cat(paste("p-value: ", smaller.tail * 2,"\n"))#
					if(drawlines == "yes"){lines(x = c(actual,actual), y = c(0,1.1*max(counts)), col="#225588", lwd=2)}#
					if(actual >= null){#
						temp = actual - null#
						if(drawlines == "yes"){lines(x = c(null - temp,null - temp), y = c(0,1.1*max(counts)), col = "#225588", lwd=2)}						#
					}#
					if(actual < null){#
						temp = null - actual#
						if(drawlines == "yes"){lines(x = c(null + temp,null + temp), y = c(0,1.1*max(counts)), col = "#225588", lwd=2)}						#
					}		#
				}#
				if(drawlines == "yes"){text(x = actual, y = 1.25*max(counts), paste("observed\n", round(actual,4)), col = "#225588", cex = 0.8)}								#
			}#
#
		}#
		# theoretical#
		if(method == "theoretical"){#
			# confidence interval#
			if(type == "ci"){#
				if(data_type == "quantitative"){#
					if(est == "median"){stop("Use simulation methods for inference for the median.")#
					}#
					if(est == "mean"){#
						# check conditions#
						boxplot(data ~ group, main = "", xlab = "")#
						#cat("Check boxplot to verify that sample data do not come from extremely skewed distributions.\n")#
						# calculate se and critvalue#
						s1 = sd(data[group == levels(group)[1]])#
						s2 = sd(data[group == levels(group)[2]])#
						se = sqrt(s1^2/n1 + s2^2/n2)#
						cat("Standard error =", round(se,4), "\n")#
						if(n1 >= 50 & n2 >= 50){critvalue = qnorm( (1 - conflevel)/2 + conflevel )}#
						if(n1 < 50 | n2 < 50) {critvalue = qt( (1 - conflevel)/2 + conflevel , df = min(n1 - 1, n2 - 1))}						#
					}#
				}#
				if(data_type == "categorical"){#
					# check conditions#
					suc1 = sum(data[group == levels(group)[1]] == success)#
					fail1 = sum(data[group == levels(group)[1]] != success)#
					cat(paste("Group 1: Number of successes =", round(suc1), ";", "Number of failures =", round(fail1)), "\n")	#
					suc2 = sum(data[group == levels(group)[2]] == success)#
					fail2 = sum(data[group == levels(group)[2]] != success)#
					cat(paste("Group 2: Number of successes =", round(suc2), ";", "Number of failures =", round(fail2)), "\n")#
					if(suc1 < 10 | fail1 < 10 | suc2 < 10 | fail2 < 10){#
						stop("There aren't at least 10 successes and 10 failures, use simulation methods instead.")#
					}#
					# calculate se and critvalue#
					p1 = suc1 / n1#
					p2 = suc2 / n2#
					se = sqrt(p1 * (1-p1)/n1 + p2 * (1-p2)/n2)#
					cat("Standard error =", round(se,4), "\n")#
					critvalue = qnorm( (1 - conflevel)/2 + conflevel )					#
				}#
				# calculate ci#
				me = critvalue * se#
				ci = c(actual - me , actual + me)#
				cat(c(conflevel*100, "% Confidence interval = (", round(ci[1],2), ",", round(ci[2],2), ")\n"))#
			}#
			# hypothesis test#
			if(type == "ht"){#
				if(data_type == "quantitative"){#
					if(est == "median"){stop("Use simulation methods for inference for the median.")#
					}#
					if(est == "mean"){#
						# hypotheses#
						mu1 = paste("mu_", order[1], sep = "")		#
						mu2 = paste("mu_", order[2], sep = "")		#
						cat(paste("H0:", mu1 , "-", mu2, "=", null, "\n"))#
						cat(paste("HA:", mu1 , "-", mu2, sign, null, "\n"))#
						# check conditions#
						par(mfrow = c(1,2))#
						boxplot(data ~ group, main = "", xlab = "")#
						#cat("Check boxplot to verify that sample data do not come from extremely skewed distributions.\n")#
						# calculate test statistic and p-value component#
						s1 = sd(data[group == levels(group)[1]])#
						s2 = sd(data[group == levels(group)[2]])#
						se = sqrt(s1^2/n1 + s2^2/n2)#
						cat("Standard error =", round(se,3), "\n")#
						teststat = (actual - null)/se#
						if(n1 >= 50 & n2 >= 50){#
							cat(paste("Test statistic: Z = ", round(teststat, 3),"\n"))#
							smaller.tail = round(min(pnorm(teststat), pnorm(teststat, lower.tail = FALSE)), 4)#
							}#
						if(n1 < 50 | n2 < 50) {#
							cat(paste("Test statistic: T = ", round(teststat, 3),"\n"))#
							cat(paste("Degrees of freedom: ", min(n1 - 1, n2 - 1), "\n"))#
							smaller.tail = round(min(pt(teststat, df = min(n1 - 1, n2 - 1)), pt(teststat, df = min(n1 - 1, n2 - 1), lower.tail = FALSE)), 4)#
							}						#
					}	#
				}#
				if(data_type == "categorical"){#
					if(null <= -1 | null >= 1){#
						stop("Null value should be a proportion between 0 and 1.")#
					}#
					# hypotheses#
					p1 = paste("p_", order[1], sep = "")		#
					p2 = paste("p_", order[2], sep = "")		#
					cat(paste("H0:", p1 , "-", p2, "=", null, "\n"))#
					cat(paste("HA:", p1 , "-", p2, sign, null, "\n"))#
#
					# calculate p_pool#
					suc1 = sum(data[group == levels(group)[1]] == success)#
					fail1 = sum(data[group == levels(group)[1]] != success)#
					suc2 = sum(data[group == levels(group)[2]] == success)#
					fail2 = sum(data[group == levels(group)[2]] != success)#
					p_pool =  (suc1 + suc2)/(n1 + n2)#
					cat(paste("Pooled proportion =", round(p_pool, 4), "\n"))	#
					# check conditions#
					exp_suc1 = n1 * p_pool#
					exp_fail1 = n1 * (1 - p_pool)#
					cat(paste("Group 1: Number of expected successes =", round(exp_suc1), ";", "Number of expected failures =", round(exp_fail1)), "\n")#
					exp_suc2 = n2 * p_pool#
					exp_fail2 = n2 * (1 - p_pool)#
					cat(paste("Group 2: Number of expected successes =", round(exp_suc2), ";", "Number of expected failures =", round(exp_fail2)), "\n")#
					if(exp_suc1 < 10 | exp_fail1 < 10 | exp_suc2 < 10 | exp_fail2 < 10){#
						stop("There aren't at least 10 expected successes and 10 expected failures, use simulation methods instead.")#
					}#
					# calculate test statistic and p-value#
					se = sqrt( p_pool * (1 - p_pool) / n1 + p_pool * (1 - p_pool) / n2 )#
					cat("Standard error =", round(se,3), "\n")#
					teststat = (actual - null) / se#
					cat(paste("Test statistic: Z = ", round(teststat, 3),"\n"))#
					smaller.tail = round(min(pnorm(teststat), pnorm(teststat, lower.tail = FALSE)), 4)								#
				}#
				# alternative = less#
				if(alternative == "less"){#
					if(actual < null){cat(paste("p-value: ", smaller.tail,"\n"))}				#
					if(actual > null){cat(paste("p-value: ", 1 - smaller.tail,"\n"))}#
					normTail(L = teststat, axes = FALSE, col = "#22558833")#
					axis(1, at = c(-3, teststat, 0, 3), labels = c(NA, paste(round(actual,2)), paste(null), NA))#
				}#
				# alternative = greater#
				if(alternative == "greater"){#
					if(actual < null){cat(paste("p-value: ", 1 - smaller.tail,"\n"))}				#
					if(actual > null){cat(paste("p-value: ", smaller.tail,"\n"))}#
					normTail(U = teststat, axes = FALSE, col = "#22558833")#
					axis(1, at = c(-3, 0, teststat, 3), labels = c(NA, paste(null), paste(round(actual,2)), NA))#
				}				#
				# alternative = twosided	#
				if(alternative == "twosided"){#
					cat(paste("p-value: ", smaller.tail * 2,"\n"))#
					if(actual < null){#
						normTail(L = teststat, U = -1*teststat, axes = FALSE, col = "#22558833")#
						axis(1, at = c(-3, teststat, 0, -1*teststat, 3), labels = c(NA, paste(round(actual,2)), paste(null), paste(round(null + (null - actual), 2)), NA))#
					}#
					if(actual > null){#
						normTail(L = -1*teststat, U = teststat, axes = FALSE, col = "#22558833")#
						axis(1, at = c(-3, -1*teststat, 0, teststat, 3), labels = c(NA, paste(round(null - (actual - null), 2)), paste(null), paste(round(actual,2)), NA))#
					}				#
				}#
				par(mfrow = c(1,1))#
#
			}#
		}#
	}#
	if(simdist == TRUE){return(sim_dist)}#
}
nc = read.csv("~/Dropbox/OI Labs/lab5/v2 - knitr/data & code/nc.csv")
ls()
setwd("~/Dropbox/OI Labs/lab5/v2 - knitr/data & code")
save(list=c("inference","nc"), file = "nc.RData")
load("/Users/mine/Dropbox/OI Labs/lab4/lab4B/v2 - knitr/data & code/ames.RData")
ls()
dim(nc)
inference(data = nc$weight, group = nc$habit, est = "mean", type = "ht", null = 0,    alternative = "twosided", method = "theoretical")
nsfg = read.csv("~/Desktop/Conferences/useR/2012/talk/data/nsfg.csv")
nsfg
partners = nsfg$LIFEPRTS_recode#
gender = nsfg$gender#
#
inference(data = partners, group = gender, type = "ci", est = "mean", method = "theoretical")
q()
