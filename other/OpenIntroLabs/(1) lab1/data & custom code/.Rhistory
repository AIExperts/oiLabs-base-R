summary(infection_ha)#
#
metabias(infection_ha)#
#
funnel(infection_ha, comb.fixed = TRUE, yaxis = "size", cex.lab = 0.8)#
#
forest(infection_ha, allstudies = F, comb.fixed = TRUE, comb.random = TRUE, lab.e = "Drain", lab.c = "No-Drain", fontsize = 8, leftlabs = c("Study", "Infection", "Total", "Infection", "Total"))#
##########################################################################
#
## Knee arthroplasty#
#
metadata_ka = metadata[metadata$Procedure == "Knee arthroplasty",]#
#
# Hematoma, Healing, Abscess, Seroma - less than 3 studies with this outcome#
#
# Infection#
#
infection_ka = metabin(Infection_D, Drain, Infection_ND, NoDrain, studlab = AuthorYear, subset = !is.na(metadata_ka$Infection_ND)  & !is.na(metadata_ka$Infection_D),data = metadata_ka, sm = "OR", allstudies = FALSE)#
#
summary(infection_ka)#
#
metabias(infection_ka)#
#
funnel(infection_ka, comb.fixed = TRUE, yaxis = "size", cex.lab = 0.8)#
#
forest(infection_ka, allstudies = F, comb.fixed = TRUE, comb.random = TRUE, lab.e = "Drain", lab.c = "No-Drain", fontsize = 8, leftlabs = c("Study", "Infection", "Total", "Infection", "Total"))#
##########################################################################
#
## Clean Contaminated#
#
metadata_cc = metadata[which(metadata$CleanContaminated == 1), ]#
# Hematoma, Healing, Abscess, Seroma - less than 3 studies with this outcome#
#
# Infection#
#
infection_cc = metabin(Infection_D, Drain, Infection_ND, NoDrain, studlab = AuthorYear, subset = !is.na(metadata_cc$Infection_ND)  & !is.na(metadata_cc$Infection_D),data = metadata_cc, sm = "OR", allstudies = FALSE)#
#
summary(infection_cc)#
#
metabias(infection_cc)#
#
funnel(infection_cc, comb.fixed = TRUE, yaxis = "size", cex.lab = 0.8)#
#
forest(infection_cc, allstudies = F, comb.fixed = TRUE, comb.random = TRUE, lab.e = "Drain", lab.c = "No-Drain", fontsize = 8, leftlabs = c("Study", "Infection", "Total", "Infection", "Total"))#
##########################################################################
#
## Obese Patient#
#
metadata_op = metadata[which(metadata$ObesePatient == 1), ]#
# Hematoma#
#
hema_op = metabin(Hematoma_D, Drain, Hematoma_ND, NoDrain, studlab = AuthorYear, subset = !is.na(metadata_op$Hematoma_ND)  & !is.na(metadata_op$Hematoma_D), data = metadata_op, sm = "OR", allstudies = FALSE)#
#
summary(hema_op)#
#
metabias(hema_op)#
#
funnel(hema_op, comb.fixed = TRUE, yaxis = "size", cex.lab = 0.8)#
#
forest(hema_op, allstudies = F, comb.fixed = TRUE, comb.random = TRUE, lab.e = "Drain", lab.c = "No-Drain", fontsize = 8, leftlabs = c("Study", "Hematoma", "Total", "Hematoma", "Total"))#
# Healing#
#
heal_op = metabin(Healing_D, Drain, Healing_ND, NoDrain, studlab = AuthorYear, subset = !is.na(metadata_op$Healing_ND)  & !is.na(metadata_op$Healing_D),data = metadata_op, sm = "OR", allstudies = FALSE)#
#
summary(heal_op)#
#
metabias(heal_op)#
#
funnel(heal_op, comb.fixed = TRUE, yaxis = "size", cex.lab = 0.8)#
#
forest(heal_op, allstudies = F, comb.fixed = TRUE, comb.random = TRUE, lab.e = "Drain", lab.c = "No-Drain", fontsize = 8, leftlabs = c("Study", "Healing", "Total", "Healing", "Total"))#
# Abscess#
#
abscess_op = metabin(Abscess_D, Drain, Abscess_ND, NoDrain, studlab = AuthorYear, subset = !is.na(metadata_op$Abscess_ND)  & !is.na(metadata_op$Abscess_D),data = metadata_op, sm = "OR", allstudies = FALSE)#
#
summary(abscess_op)#
#
metabias(abscess_op)#
#
funnel(abscess_op, comb.fixed = TRUE, yaxis = "size", cex.lab = 0.8)#
#
forest(abscess_op, allstudies = F, comb.fixed = TRUE, comb.random = TRUE, lab.e = "Drain", lab.c = "No-Drain", fontsize = 8, leftlabs = c("Study", "Abscess", "Total", "Abscess", "Total"))#
# Seroma#
#
seroma_op = metabin(Seroma_D, Drain, Seroma_ND, NoDrain, studlab = AuthorYear, subset = !is.na(metadata_op$Seroma_ND)  & !is.na(metadata_op$Seroma_D),data = metadata_op, sm = "OR", allstudies = FALSE)#
#
summary(seroma_op)#
#
metabias(seroma_op)#
#
funnel(seroma_op, comb.fixed = TRUE, yaxis = "size", cex.lab = 0.8)#
#
forest(seroma_op, allstudies = F, comb.fixed = TRUE, comb.random = TRUE, lab.e = "Drain", lab.c = "No-Drain", fontsize = 8, leftlabs = c("Study", "Seroma", "Total", "Seroma", "Total"))#
# Infection#
#
infection_op = metabin(Infection_D, Drain, Infection_ND, NoDrain, studlab = AuthorYear, subset = !is.na(metadata_op$Infection_ND)  & !is.na(metadata_op$Infection_D), data = metadata_op, sm = "OR", allstudies = FALSE)#
#
summary(infection_op)#
#
metabias(infection_op)#
#
funnel(infection_op, comb.fixed = TRUE, yaxis = "size", cex.lab = 0.8)#
#
forest(infection_op, allstudies = F, comb.fixed = TRUE, comb.random = TRUE, lab.e = "Drain", lab.c = "No-Drain", fontsize = 8, leftlabs = c("Study", "Infection", "Total", "Infection", "Total"))#
##############
hema$group = addvar(hema, metadata, "Group", by.y = "AuthorYear")
print(datatable, tabular.environment='longtable', NA.string = "-", size = "small")
?metabias
hema = metabin(Hematoma_D, Drain, Hematoma_ND, NoDrain, studlab = AuthorYear, subset = !is.na(metadata$Hematoma_ND)  & !is.na(metadata$Hematoma_D), data = metadata, sm = "OR", allstudies = FALSE)
summary(hema)
metabias(hema)
metabias(hema)$p.value
abscess = metabin(Abscess_D, Drain, Abscess_ND, NoDrain, studlab = AuthorYear, subset = !is.na(metadata$Abscess_ND)  & !is.na(metadata$Abscess_D),data = metadata, sm = "OR", allstudies = FALSE)
summary(abscess)
metabias(abscess)
metabias(abscess, k.min = 7)
?meta
??meta
help(package="meta")
q()
install.packages(c("DAAG", "MASS", "ReadImages", "VennDiagram", "arm", "caTools", "countrycode", "deldir", "foreign", "gdata", "ggplot2", "gmodels", "gplots", "iterators", "maps", "nlme", "rgl", "rpart", "scales", "sp", "spdep", "survey", "survival"))
90*4
360/2
120*4
60+60+30+30
60+60+40+40
480/3
q()
135/1.8*7
135/2*3
135/2
135*6+125
q()
25.75*600
92.2*9.5
300000-50000
250000/2000
125/12
setwd("~/Desktop/Projects/Private Consulting/Tellus (Seth Glickman)")
d = read.csv("data/responses_by_encounter-05-22-2012.csv")
d
dim(d)
heaD(d)
head(d)
d_raw = read.csv("data/responses_by_encounter-05-22-2012.csv")
all(is.na(d$X1)
)
all(is.na(d$X1))
all(is.na(d$X2))
apply(d_raw, 2, function(x) all(is.na(x)))
d_raw[,apply(d_raw, 2, function(x) all(is.na(x)))]
dim(d_raw[,apply(d_raw, 2, function(x) all(is.na(x)))])
d_raw[,apply(d_raw, 2, function(x) all(!is.na(x)))]
dim(d_raw[,apply(d_raw, 2, function(x) all(!is.na(x)))])
dim(d_raw[,apply(d_raw, 2, function(x) !all(is.na(x)))])
d = d_raw[,apply(d_raw, 2, function(x) !all(is.na(x)))]
d
names(d)
paste("Q",1:30)
paste("Q",1:30, sep = "")
true_dists = matrix(NA,nrow = 30, ncol = 7)
true_dists
which(d[,2] == 1)
length(which(d[,2] == 1))
for(i in 1:7){#
for(j in 2:nrow(true_dists)){#
true_dists[i,j] = length(which(d[,j] == i))#
}#
}
true_dists = matrix(NA,nrow = 30, ncol = 7)#
#
for(j in 1:7){#
for(i in 2:nrow(true_dists)){#
true_dists[i,j] = length(which(d[,i] == j))#
}#
}
true_dists
true_dists = matrix(NA,nrow = 30, ncol = 7)#
#
for(j in 1:7){#
for(i in 2:nrow(true_dists)){#
true_dists[i-1,j] = length(which(d[,i] == j))#
}#
}
true_dists
true_dists = matrix(NA,nrow = 30, ncol = 7)#
#
for(j in 1:7){#
for(i in 1:nrow(true_dists)){#
true_dists[i,j] = length(which(d[,i+1] == j))#
}#
}
true_dists
length(which(d[,2] == 1))
length(which(d[,2] == 2))
length(which(d[,2] == 3))
length(which(d[,2] == 4))
length(which(d[,29] == 4))
questions = sample(1:30, size = 30, replace = TRUE)#
true_dists_boot = true_dists[questions,]
true_dists_boot
set.seed(295)#
#
questions = sample(1:30, size = 30, replace = TRUE)#
true_dists_boot = true_dists[questions,]
true_dists_boot
survey = sample(1:30, size = 10, replace = FALSE)
v
survey
set.seed(123)#
survey = sample(1:30, size = 10, replace = FALSE)
survey
m <- matrix(1:25,5,5)#
boxplot(x = as.list(as.data.frame(m)))
0.25/1.96
0.5/1.96
download.file("http://www.openintro.org/stat/data/kobe.RData", destfile = "kobe.RData")
ls()
load(kobe.RData)
load("kobe.RData")
ls()
setwd("~/Dropbox/OI Labs/lab2/data")
calc_streak <- function(x){#
y <- rep(0,length(x))#
y[x == "H"] <- 1#
y <- c(0, y, 0)#
wz <- which(y == 0)#
streak <- diff(wz) - 1#
return(streak)#
}
load("/Users/mine/Dropbox/OI Labs/lab2/data/kobe.RData")
rm(ls())
rm(list=ls())
ls()
calc_streak <- function(x){#
y <- rep(0,length(x))#
y[x == "H"] <- 1#
y <- c(0, y, 0)#
wz <- which(y == 0)#
streak <- diff(wz) - 1#
return(streak)#
}
load("/Users/mine/Dropbox/OI Labs/lab2/data/kobe.RData")
kobe.RData
load(kobe.RData)
load("kobe.RData")
ls()
rm(calc.streak)
ls()
save(file="kobe.RData")
save(list=ls(), file="kobe.RData")
rm(list=ls())
load("/Users/mine/Dropbox/OI Labs/lab2/data/kobe.RData")
ls()
load("/Users/mine/Dropbox/OI Labs/lab7/data/mlb11.RData")
rm(list=ls())
ls()
load("/Users/mine/Dropbox/OI Labs/lab7/data/mlb11.RData")
ls()
rm(plot.ss)
TODO: Fix plot labels#
#
plot_ss <- function(x, y, show.squares = FALSE, least.squares = FALSE){#
plot(y~x, asp = 1)# xlab = paste(substitute(x)), ylab = paste(substitute(y)))#
if(least.squares){#
m1 <- lm(y~x)#
y.hat <- m1$fit#
} else{#
cat("Click two points to make a line.")#
pt1 <- locator(1)#
points(pt1$x, pt1$y, pch = 4)#
pt2 <- locator(1)#
points(pt2$x, pt2$y, pch = 4)#
pts <- data.frame("x" = c(pt1$x, pt2$x),"y" = c(pt1$y, pt2$y))#
m1 <- lm(y ~ x, data = pts)#
y.hat <- predict(m1, newdata = data.frame(x))#
}#
r <- y - y.hat#
abline(m1)#
#
oSide <- x - r#
LLim <- par()$usr[1]#
RLim <- par()$usr[2]#
oSide[oSide < LLim | oSide > RLim] <- c(x + r)[oSide < LLim | oSide > RLim] # move boxes to avoid margins#
#
n <- length(y.hat)#
for(i in 1:n){#
lines(rep(x[i], 2), c(y[i], y.hat[i]), lty = 2, col = "blue")#
if(show.squares){#
lines(rep(oSide[i], 2), c(y[i], y.hat[i]), lty = 3, col = "orange")#
lines(c(oSide[i], x[i]), rep(y.hat[i],2), lty = 3, col = "orange")#
lines(c(oSide[i], x[i]), rep(y[i],2), lty = 3, col = "orange")#
}#
}#
#
SS <- round(sum(r^2), 3)#
cat("\r                                ")#
print(m1)#
cat("Sum of Squares: ", SS)#
}
setwd("~/Dropbox/OI Labs/lab7/data")
save(list=ls(),file = "mlb11.RData")
rm(list=ls())
load("/Users/mine/Dropbox/OI Labs/lab7/data/mlb11.RData")
ls()
plot_ss(mlb11$runs ~ mlb11$at_bats)
plot_ss(mlb11$at_bats, mlb11$runs)
plot_ss(mlb11$at_bats, mlb11$runs)
load("/Users/mine/Dropbox/OI Labs/lab7/data/mlb11.RData")
ls()
plot_ss(mlb11$at_bats, mlb11$runs, showSquares = TRUE)
TODO: Fix plot labels#
#
plot_ss <- function(x, y, showSquares = FALSE, leastSquares = FALSE){#
plot(y~x, asp = 1)# xlab = paste(substitute(x)), ylab = paste(substitute(y)))#
if(leastSquares){#
m1 <- lm(y~x)#
y.hat <- m1$fit#
} else{#
cat("Click two points to make a line.")#
pt1 <- locator(1)#
points(pt1$x, pt1$y, pch = 4)#
pt2 <- locator(1)#
points(pt2$x, pt2$y, pch = 4)#
pts <- data.frame("x" = c(pt1$x, pt2$x),"y" = c(pt1$y, pt2$y))#
m1 <- lm(y ~ x, data = pts)#
y.hat <- predict(m1, newdata = data.frame(x))#
}#
r <- y - y.hat#
abline(m1)#
#
oSide <- x - r#
LLim <- par()$usr[1]#
RLim <- par()$usr[2]#
oSide[oSide < LLim | oSide > RLim] <- c(x + r)[oSide < LLim | oSide > RLim] # move boxes to avoid margins#
#
n <- length(y.hat)#
for(i in 1:n){#
lines(rep(x[i], 2), c(y[i], y.hat[i]), lty = 2, col = "blue")#
if(showSquares){#
lines(rep(oSide[i], 2), c(y[i], y.hat[i]), lty = 3, col = "orange")#
lines(c(oSide[i], x[i]), rep(y.hat[i],2), lty = 3, col = "orange")#
lines(c(oSide[i], x[i]), rep(y[i],2), lty = 3, col = "orange")#
}#
}#
#
SS <- round(sum(r^2), 3)#
cat("\r                                ")#
print(m1)#
cat("Sum of Squares: ", SS)#
}
plot_ss(mlb11$at_bats, mlb11$runs, showSquares = TRUE)
rm(list=ls())
load("/Users/mine/Dropbox/OI Labs/lab7/data/mlb11.RData")
rm(plot_ss)
TODO: Fix plot labels#
#
plot_ss <- function(x, y, showSquares = FALSE, leastSquares = FALSE){#
plot(y~x, asp = 1)# xlab = paste(substitute(x)), ylab = paste(substitute(y)))#
if(leastSquares){#
m1 <- lm(y~x)#
y.hat <- m1$fit#
} else{#
cat("Click two points to make a line.")#
pt1 <- locator(1)#
points(pt1$x, pt1$y, pch = 4)#
pt2 <- locator(1)#
points(pt2$x, pt2$y, pch = 4)#
pts <- data.frame("x" = c(pt1$x, pt2$x),"y" = c(pt1$y, pt2$y))#
m1 <- lm(y ~ x, data = pts)#
y.hat <- predict(m1, newdata = data.frame(x))#
}#
r <- y - y.hat#
abline(m1)#
#
oSide <- x - r#
LLim <- par()$usr[1]#
RLim <- par()$usr[2]#
oSide[oSide < LLim | oSide > RLim] <- c(x + r)[oSide < LLim | oSide > RLim] # move boxes to avoid margins#
#
n <- length(y.hat)#
for(i in 1:n){#
lines(rep(x[i], 2), c(y[i], y.hat[i]), lty = 2, col = "blue")#
if(showSquares){#
lines(rep(oSide[i], 2), c(y[i], y.hat[i]), lty = 3, col = "orange")#
lines(c(oSide[i], x[i]), rep(y.hat[i],2), lty = 3, col = "orange")#
lines(c(oSide[i], x[i]), rep(y[i],2), lty = 3, col = "orange")#
}#
}#
#
SS <- round(sum(r^2), 3)#
cat("\r                                ")#
print(m1)#
cat("Sum of Squares: ", SS)#
}
save(list=ls(),file = "mlb11.RData")
ls()
plot_ss(mlb11$at_bats, mlb11$runs, showSquares = TRUE)
goog <- read.csv("http://www.openintro.org/stat/data/goog.csv")
plot(goog[,-1])
goog <- read.csv("http://www.openintro.org/stat/data/goog.csv")
plot(goog[,-1])
plot(goog[,2:8])
which.max(goog$pop)
goog_sub = subset(goog, country != "india")
plot(goog_sub[,-1])
table(goog_sub$dem)
goog_sub$dem = relevel(goog_sub$dem, ref = "hybrid")
m_full = lm(complied ~ requests + pop + hdi + dem + internet + freepress, data = goog_sub)#
summary(m_full)
m_step1 = lm(complied ~ requests + pop + hdi + dem + freepress, data = goog_sub)#
summary(m_step1)
m_full = lm(complied ~ requests + pop + hdi + dem + internet, data = goog_sub)#
summary(m_full)
m_step2 = lm(complied ~ requests + pop + hdi + dem, data = goog_sub)#
summary(m_step3)
m_step2 = lm(complied ~ requests + pop + hdi + dem, data = goog_sub)#
summary(m_step2)
m_step3 = lm(complied ~ pop + hdi + dem, data = goog_sub)#
summary(m_step3)
m_step4 = lm(complied ~ pop + hdi, data = goog_sub)#
summary(m_step4)
summary(m_full)
m1 = lm(complied ~ pop + hdi + dem + internet + freepress, data = goog_sub)#
summary(m1)
m_full = lm(complied ~ requests + pop + hdi + dem + internet + freepress, data = goog_sub)#
summary(m_full)
step(m_full)
m1 <- lm(runs  ̃ at_bats, data = mlb11)
boxplot(cdc$height ~ cdc$gender)
source("http://www.openintro.org/stat/data/cdc.R")
boxplot(cdc$height ~ cdc$gender)
lm(complied  ̃ requests + pop + hdi + dem + internet + freepress)
lm(complied ~ requests + pop + hdi + dem + internet + freepress)
lm(complied ~ requests + pop + hdi + dem + internet + freepress, data=goog)
lm(complied  ̃ requests + pop + hdi + dem + internet + freepres, data=goog)
lm(complied  ̃ requests + pop + hdi + dem + internet + freepress)
￼m <- lm(complied  ̃ pop + hdi, data = goog_sub)
m  <- lm(complied  ̃ pop + hdi, data = goog_sub)
m <- lm(complied  ̃ pop + hdi, data = goog_sub) summary(m)
m <- lm(complied ! pop + hdi, data = goog_sub) summary(m)
m <- lm(complied ~ pop + hdi, data = goog_sub) summary(m)
m <- lm(complied ~ pop + hdi, data = goog_sub)
m
m <- lm(complied  ̃ pop + hdi, data = goog_sub)
m_full <- lm(complied  ̃ requests + pop + hdi + dem + internet + freepress, data = goog_sub)
m_full = lm(complied ~ requests + pop + hdi + dem + internet + freepress, data = goog_sub)
m_full <- lm(complied  ̃ requests + pop + hdi + dem + internet + freepress, data = goog_sub)
data()
data(anscombe)
?anscombe
anscombe
lm(y1~x1)
lm(y1~x1, data = anscombe)
m <- lm(y1~x1, data = anscombe)#
summary(m)
m <- lm(y1 ~ x1, data = anscombe)
m <- lm(y1 ~ x1, data = anscombe)
m
m <- lm(y1 ~ x1, data = anscombe)
m_full <- lm(complied  ̃ requests + pop + hdi + dem + internet + freepress, data = goog_sub)
m <- lm(y1 ~ x1, data = anscombe)
m_full <- lm(complied  ̃ requests + pop + hdi + dem + internet + freepress, data = goog_sub)
m_full <- lm(complied  ̃ requests + pop + hdi + dem + internet + freepress, data = goog_sub)
m_full = lm(complied  ̃ requests + pop + hdi + dem + internet + freepress, data = goog_sub)
m_full = lm(complied  ̃ requests + pop + hdi + dem + internet + freepress, data = goog_sub)
m = = lm(complied ~ requests + pop + hdi + dem + internet + freepress,    data = goog_sub)
m = lm(complied ~ requests + pop + hdi + dem + internet + freepress,    data = goog_sub)
m_full = lm(complied  ̃ requests + pop + hdi + dem + internet + freepress, data = goog_sub)
m_full = lm(complied  ̃ requests + pop + hdi + dem + internet + freepress, data = goog_sub)
m_full = lm(complied  ̃ requests + pop + hdi + dem + internet + freepress, data = goog_sub)
m_full = lm(complied ~ requests + pop + hdi + dem + internet + freepress, data = goog_sub)
m_full = lm(complied ~ requests + pop + hdi + dem + internet + freepress, data = goog_sub)
source("http://www.openintro.org/stat/data/arbuthnot.R")
setwd("~/Dropbox/OI Labs/lab intro/data")
source("arbuthnot.R")
arbuthnot
dim(arbuthnot)
names(arbuthnot)
arbuthnot$boys
plot(x = arbuthnot$year, y = arbuthnot$girls)
plot(x = arbuthnot$year, y = arbuthnot$girls, type = "l")
?plot
5218 + 4683
arbuthnot$boys + arbuthnot$girls
plot(arbuthnot$year, arbuthnot$boys + arbuthnot$girls, type = "l")
5218/4683
arbuthnot$boys/arbuthnot$girls
5218/(5218 + 4683)
arbuthnot$boys/(arbuthnot$boys + arbuthnot$girls)
arbuthnot$boys > arbuthnot$girls
setwd("~/Dropbox/OI Labs/lab1/data")
source("cdc.R")
boxplot(cdc$height ~ cdc$gender)
sim_unfair_coin <- sample(outcomes, size = 100, replace = TRUE, prob = c(0.2, 0.8))
outcomes <- <- c("heads", "tails")
outcomes <- c("heads", "tails")
sim_unfair_coin <- sample(outcomes, size = 100, replace = TRUE, prob = c(0.2, 0.8))
cdc[, 6]
load("/Users/mine/Dropbox/OI Labs/lab7/data/mlb11.RData")
ls()
m1 <- lm(runs ~ at_bats, data = mlb11)
￼plot(mlb11$runs ~ mlb11$at_bats)
plot(mlb11$$runs ~ mlb11$at_bats))
plot(mlb11$runs ~ mlb11$at_bats)
plot(mlb11$runs ~ mlb11$at_bats)
m1 <- lm(runs ~ at_bats, data = mlb11)
plot(mlb11$runs ~ mlb11$at_bats)
abline(m1)
plot(mlb11$runs ~ mlb11$at_bats) abline(m1)
plot(mlb11$runs ~ mlb11$at_bats); abline(m1)
q()
